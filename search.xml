<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/2022/01/19/Docker/</url>
    <content><![CDATA[<h1 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h1><span id="more"></span>
<h1 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h1><h2 id="Docker基本组成："><a href="#Docker基本组成：" class="headerlink" title="Docker基本组成："></a>Docker基本组成：</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119165007270.png" alt="image-20220119165007270"></p>
<p><strong>镜像</strong>（image）</p>
<p>Docker镜像好比一个模板，可以通过这个模板创建容器服务，tomcat镜像==&gt;run ==&gt;tomcat 01容器（提供服务），通过镜像可以创建多个容器。</p>
<p><strong>容器</strong>(Container)</p>
<p>Docker利用容器技术，独立运行一个或一组应用程序，通过镜像来创建。</p>
<p>可以将容器理解为一个简易的linux系统。</p>
<p><strong>仓库</strong>(Repository)</p>
<p>仓库就是存放镜像的地方。</p>
<p>仓库分为公有仓库和私有仓库。</p>
<h2 id="Docker与虚拟机的区别："><a href="#Docker与虚拟机的区别：" class="headerlink" title="Docker与虚拟机的区别："></a>Docker与虚拟机的区别：</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119163814035.png" alt="image-20220119163814035" style="zoom: 50%;" /></p>
<p>虚拟机是一个缩小版的操作系统，不同的应用共用一个运行环境。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119163535959.png" alt="image-20220119163535959" style="zoom: 67%;" /></p>
<p>docker将不同的应用与其运行环境封装成一个个容器，并放置于OS内核上运行。不同容器之间相互隔离，每个容器有自己独立的文件系统。</p>
<h3 id="DevOps-开发、运维"><a href="#DevOps-开发、运维" class="headerlink" title="DevOps(开发、运维)"></a>DevOps(开发、运维)</h3><p><strong>应用更快速的交付和部署</strong></p>
<p>Docker:打包镜像发布测试，一键运行。</p>
<p><strong>更便捷的升级和扩缩容</strong></p>
<p>使用Docker之后，我们部署应用如同搭积木。</p>
<p><strong>更简单的系统运维</strong></p>
<p>在容器化之后，开发和测试环境高度一致。</p>
<p><strong>更高效的计算资源利用</strong></p>
<p>Docker是内核级别的虚拟化，可以在一个物理机上运行多个容器实例。</p>
<h3 id="Docker为什么比VM快？"><a href="#Docker为什么比VM快？" class="headerlink" title="Docker为什么比VM快？"></a>Docker为什么比VM快？</h3><ol>
<li><p>Docker有着比虚拟机更少的抽象层</p>
</li>
<li><p>Docker利用宿主机的内核，VM需要搭建额外的环境。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119184810155.png" alt="image-20220119184810155" style="zoom: 67%;" /></p>
<p>新建一个容器的时候，Docker不需要像虚拟机一样额外加载一个操作系统内核。</p>
</li>
</ol>
<h2 id="Docker-run运行机制"><a href="#Docker-run运行机制" class="headerlink" title="Docker run运行机制"></a>Docker run运行机制</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119183156875.png" alt="image-20220119183156875"></p>
<h2 id="Docker底层实现"><a href="#Docker底层实现" class="headerlink" title="Docker底层实现"></a>Docker底层实现</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119184310423.png" alt="image-20220119184310423"></p>
<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@node10-desktop:/home/ubuntu# docker images -a</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   3 months ago   13.3kB</span><br></pre></td></tr></table></figure>
<p>可选选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">List images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             #展示所有镜像</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           Only show image IDs</span><br></pre></td></tr></table></figure>
<h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@node10-desktop:/home/ubuntu# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11992     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4591      [OK]    </span><br></pre></td></tr></table></figure>
<p>可选选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@node10-desktop:~$ docker search mysql --filter=STARS=3000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11992     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4591      [OK]</span><br></pre></td></tr></table></figure>
<p>搜索stars大于3000的。</p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker pull mysql</span><br><span class="line">Using default tag: latest #如果不写 tag ，默认是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Pull complete # 分层下载， docker iamges的核心 联合文件系统</span><br><span class="line">93619dbc5b36: Pull complete </span><br><span class="line">99da31dd6142: Pull complete </span><br><span class="line">626033c43d70: Pull complete </span><br><span class="line">37d5d7efb64e: Pull complete </span><br><span class="line">ac563158d721: Pull complete </span><br><span class="line">d2ba16033dad: Pull complete </span><br><span class="line">688ba7d5c01a: Pull complete </span><br><span class="line">00e060b6d11d: Pull complete </span><br><span class="line">1c04857f594f: Pull complete </span><br><span class="line">4d7cfa90e6ea: Pull complete </span><br><span class="line">e0431212d27d: Pull complete </span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709 #签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest #真实地址</span><br></pre></td></tr></table></figure>
<p>下载mysql 5.7版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@node10-desktop:~$ docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Already exists </span><br><span class="line">93619dbc5b36: Already exists </span><br><span class="line">99da31dd6142: Already exists </span><br><span class="line">626033c43d70: Already exists </span><br><span class="line">37d5d7efb64e: Already exists </span><br><span class="line">ac563158d721: Already exists </span><br><span class="line">d2ba16033dad: Already exists #以上层级内容共用之前版本</span><br><span class="line">0ceb82207cd7: Pull complete </span><br><span class="line">37f2405cae96: Pull complete </span><br><span class="line">e2482e017e53: Pull complete </span><br><span class="line">70deed891d42: Pull complete </span><br><span class="line">Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker rmi -f 容器id</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rmi -f 容器id 容器id 容器id 容器id  <span class="comment">#删除多个容器</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rmi -f $(docker images -aq)       <span class="comment">#删除全部容器</span></span></span><br><span class="line">ubuntu@node10-desktop:~$ docker rmi c20987f18b13 #按照镜像id删除</span><br><span class="line">Untagged: mysql:5.7</span><br><span class="line">Untagged: mysql@sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Deleted: sha256:c20987f18b130f9d144c9828df630417e2a9523148930dc3963e9d0dab302a76</span><br><span class="line">Deleted: sha256:6567396b065ee734fb2dbb80c8923324a778426dfd01969f091f1ab2d52c7989</span><br><span class="line">Deleted: sha256:0910f12649d514b471f1583a16f672ab67e3d29d9833a15dc2df50dd5536e40f</span><br><span class="line">Deleted: sha256:6682af2fb40555c448b84711c7302d0f86fc716bbe9c7dc7dbd739ef9d757150</span><br><span class="line">Deleted: sha256:5c062c3ac20f576d24454e74781511a5f96739f289edaadf2de934d06e910b92</span><br></pre></td></tr></table></figure>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;     容器名字 tomcat01 tomcat02 用于区分容器</span><br><span class="line">-d                后台方式运行</span><br><span class="line">-it               使用交互方式运行，进入容器内部查看内容</span><br><span class="line">-p                指定容器使用的端口 -p 8080</span><br><span class="line">	-p ip:主机端口:容器端口</span><br><span class="line">	-p 主机端口:容器端口(常用)</span><br><span class="line">	-p 容器端口</span><br><span class="line">	容器端口</span><br><span class="line">-P                随机指定端口</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">测试，启动并进入容器</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker run -it centos /bin/bash</span><br><span class="line">[root@ad604a65efa9 /]# ls         #查看内部的centos 基础版本 很多命令不完善</span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@ad604a65efa9 /]# exit       #退出</span><br></pre></td></tr></table></figure>
<h3 id="列出所有的运行的容器"><a href="#列出所有的运行的容器" class="headerlink" title="列出所有的运行的容器"></a>列出所有的运行的容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps     #列出所有正在运行的容器</span><br><span class="line">  -a   #列出所有正在和曾经运行的容器</span><br><span class="line">  -n=? #列出最近创建的n个容器</span><br><span class="line">  -q   #只显示容器的编号</span><br><span class="line">ubuntu@node10-desktop:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">ubuntu@node10-desktop:~$ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                       PORTS     NAMES</span><br><span class="line">ad604a65efa9   centos         &quot;/bin/bash&quot;   5 minutes ago   Exited (127) 3 minutes ago             sharp_jang</span><br><span class="line">a4688cab1ed2   feb5d9fea6a5   &quot;/hello&quot;      2 hours ago     Exited (0) 2 hours ago                 loving_gould</span><br><span class="line">aaf4c88c96a7   feb5d9fea6a5   &quot;/hello&quot;      2 hours ago     Exited (0) 2 hours ago                 serene_lehmann</span><br></pre></td></tr></table></figure>
<h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit        #直接容器停止并退出</span><br><span class="line">Ctrl + P +Q #容器不停止退出</span><br></pre></td></tr></table></figure>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id                #删除指定的容器</span><br><span class="line">docker rm -f $(docker ps -aq)   #删除所有的容器 -f强制删除（可以删除正在运行的容器）</span><br><span class="line">docker ps -a -q | xargs docker rm #管道方式删除所有容器</span><br></pre></td></tr></table></figure>
<h3 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id   #启动</span><br><span class="line">docker restart 容器id #重启</span><br><span class="line">docker stop 容器id    #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id    #强制停止</span><br></pre></td></tr></table></figure>
<h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><h3 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 Docker run -d 镜像名</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker run -d centos</span><br><span class="line">3f38613fb472b3fbdd6f746192f3e8e11867fcc63d9cf8991ea8cfb07c96dbd3</span><br><span class="line">ubuntu@node10-desktop:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">问题 docker ps ，cent os 停止了</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑：docker,容器使用后台运行，必须有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nginx，容器启动后，会发现自己没有提供服务，就会立刻停止。</span></span><br></pre></td></tr></table></figure>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -tf --tail 容器 #没有日志</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">自己编写一段shell脚本，并在容器中执行</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker run -d centos /bin/sh -c &quot;while true;do echo fisher626;sleep 1;done&quot; </span><br><span class="line">3815fe287c92d7145e4da54769adb8552c7e95df51de0e0fe8876b71e81c3622</span><br><span class="line">ubuntu@node10-desktop:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES</span><br><span class="line">3815fe287c92   centos    &quot;/bin/sh -c &#x27;while t…&quot;   9 seconds ago   Up 8 seconds             distracted_pare</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看日志</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker logs -tf --tail 10 3815fe287c92#显示最新的10条日志</span><br><span class="line">2022-01-19T13:01:33.174886561Z fisher626</span><br><span class="line">2022-01-19T13:01:34.178405517Z fisher626</span><br><span class="line">2022-01-19T13:01:35.181766267Z fisher626</span><br><span class="line">2022-01-19T13:01:36.185055836Z fisher626</span><br><span class="line">2022-01-19T13:01:37.188711727Z fisher626</span><br><span class="line">2022-01-19T13:01:38.192378519Z fisher626</span><br><span class="line">2022-01-19T13:01:39.196042380Z fisher626</span><br><span class="line">2022-01-19T13:01:40.199651762Z fisher626</span><br><span class="line">2022-01-19T13:01:41.203364507Z fisher626</span><br><span class="line">2022-01-19T13:01:42.206862755Z fisher626</span><br><span class="line">2022-01-19T13:01:43.210545827Z fisher626</span><br><span class="line">2022-01-19T13:01:44.214201098Z fisher626</span><br><span class="line">2022-01-19T13:01:45.217870760Z fisher626</span><br></pre></td></tr></table></figure>
<h3 id="查看容器中的进程信息"><a href="#查看容器中的进程信息" class="headerlink" title="查看容器中的进程信息"></a>查看容器中的进程信息</h3> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker top 容器id</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">c3a047896877   centos    &quot;/bin/sh -c &#x27;while t…&quot;   14 seconds ago   Up 13 seconds             serene_thompson</span><br><span class="line">ubuntu@node10-desktop:~$ docker top c3a047896877</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                23055               23033               0                   21:04               ?                   00:00:00            /bin/sh -c while true;do echo fisher626;sleep 1;done</span><br><span class="line">root                23167               23055               0                   21:05               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br></pre></td></tr></table></figure>
<h3 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line">ubuntu@node10-desktop:~$ docker inspect c3a047896877</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-01-19T13:04:58.365195048Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo fisher626;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 23055,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2022-01-19T13:04:58.650652312Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/serene_thompson&quot;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h3>]]></content>
      <categories>
        <category>容器虚拟化</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx反向代理</title>
    <url>/2022/01/11/nginx/</url>
    <content><![CDATA[<h1 id="nginx学习笔记"><a href="#nginx学习笔记" class="headerlink" title="nginx学习笔记"></a>nginx学习笔记</h1><span id="more"></span>
<h2 id="nginx作用："><a href="#nginx作用：" class="headerlink" title="nginx作用："></a>nginx作用：</h2><ol>
<li>反向代理</li>
<li>负载均衡</li>
<li>动静分离(缓存)</li>
</ol>
<h2 id="nginx基本原理："><a href="#nginx基本原理：" class="headerlink" title="nginx基本原理："></a>nginx基本原理：</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112174428453.png" alt="image-20220112174428453"></p>
<p>nginx采用master-worker形式进行工作，一个master进程可以有多个woker进程。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112174519781.png" alt="image-20220112174519781"></p>
<p>worker进程之间通过争抢的方式完成任务。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112174701073.png" alt="image-20220112174701073"></p>
<ul>
<li><p>master-workers机制的好处：</p>
<ol>
<li><p>可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>进行热部署。</p>
</li>
<li><p>每个进程是独立的进程，nginx同redis类似采用了IO多路复用（windows下没有IO多路复用机制）的机制，当一个worker进程退出后，其他的worker仍可以继续进行争抢，实现请求过程。这样可以保证nginx服务不会中断。</p>
</li>
</ol>
</li>
<li><p>需要设置多少worker比较合适：</p>
<p>每个worker线程都可以把cpu性能发挥到极致，一般worker数量与cpu核心数量相等即可。</p>
</li>
<li><p>worker的连接数：</p>
<p>当仅访问缓存在nginx的静态资源，连接数为2。</p>
<p>需要访问tomcat(服务器)的资源，连接数为4。</p>
<p>当worker最大连接数为1024时，能够支持的最大并发数为（假设一共4个worker）</p>
<script type="math/tex; mode=display">
4*1024/2 == 2048(仅访问缓存资源时)</script></li>
</ul>
<h2 id="nginx分配服务器策略"><a href="#nginx分配服务器策略" class="headerlink" title="nginx分配服务器策略"></a>nginx分配服务器策略</h2><ol>
<li><p>轮询（默认）</p>
<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器宕机，能够自动剔除。</p>
</li>
<li><p>weight</p>
<p>weight代表权重，默认值为1，权重越高被分配的客户端越多。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    	server 192.168.237.131:8080 weight = 10;</span><br><span class="line">    	server 192.168.237.131:8081 weight =  5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ip_hash</p>
<p>每个请求访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题，例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    	ip_hash</span><br><span class="line">    	server 192.168.237.131:<span class="number">8080</span> ;</span><br><span class="line">    	server <span class="number">192.168</span><span class="number">.237</span><span class="number">.131</span>:<span class="number">8081</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>fair</p>
<p>按后端服务器的响应时间进行分配，响应时间短优先分配</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    	server 192.168.237.131:<span class="number">8080</span> ;</span><br><span class="line">    	server <span class="number">192.168</span><span class="number">.237</span><span class="number">.131</span>:<span class="number">8081</span> ;</span><br><span class="line">    	fair</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220111232201962.png" alt="image-20220111232201962"></p>
<p>动静分离实现方案：</p>
<ol>
<li>把静态文件独立成单独的域名，放在独立的服务器上，也是当前主流的方案。</li>
<li>把动态文件和静态文件混合发布，通过nginx分开。 </li>
</ol>
<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>nginx集群保证如果nginx发生宕机，仍然有可用的nginx服务。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112165533959.png" alt="image-20220112165533959"></p>
<p>需要使用keepalived插件，创建一个虚拟ip分别绑定2个主、从nginx服务器。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112170048433.png" alt="image-20220112170048433"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>数组类算法笔记</title>
    <url>/2022/01/07/%E6%95%B0%E7%BB%84%E7%B1%BB%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="数组类算法笔记（双指针）"><a href="#数组类算法笔记（双指针）" class="headerlink" title="数组类算法笔记（双指针）"></a>数组类算法笔记（双指针）</h1><span id="more"></span>
<p>数组类算法笔记（双指针）</p>
<h3 id="1-两数之和-II-输入有序数组"><a href="#1-两数之和-II-输入有序数组" class="headerlink" title="1.两数之和 II - 输入有序数组"></a>1.两数之和 II - 输入有序数组</h3><p>给定一个已按照 非递减顺序排列  的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p>
<p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 1 开始计数 ，所以答案数组应当满足 1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length 。</p>
<p>你可以假设每个输入 只对应唯一的答案 ，而且你 不可以 重复使用相同的元素。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入：numbers = [2,7,11,15], target = 9</span><br><span class="line">输出：[1,2]</span><br><span class="line">解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。	</span><br></pre></td></tr></table></figure>
<ul>
<li><p>暴力解法 时间复杂度O(n^2)</p>
</li>
<li><p>unordered_map</p>
<p>unoered_map底层由哈希表实现，索引的查找时间复杂度为O(1)，利用这个性质，一层循环即可实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">count</span>(target - numbers[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;m.<span class="built_in">at</span>(target - numbers[i]), i + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                m.<span class="built_in">emplace</span>(numbers[i], i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对撞指针</p>
<p>两个指针分别指向最小最大数，并不断向中间靠拢。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] + numbers[n] == target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i + <span class="number">1</span>, n + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i] + numbers[n] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i] + numbers[n] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-验证回文串"><a href="#2-验证回文串" class="headerlink" title="2.验证回文串"></a>2.验证回文串</h3><p>  给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p>  说明：本题中，我们将空字符串定义为有效的回文串。</p>
<ul>
<li><p>isalnum()判断一个字符是否是字母或数字</p>
<p>int isalnum ( int c );</p>
<p>isalnum() 函数用来检测一个字符是否是字母或者十进制数字。</p>
<p>如果仅仅检测一个字符是否是字母，可以使用 isalpha() 函数；如果仅仅检测一个字符是否是十进制数字，可以使用 isdigit() 函数。</p>
<p>如果一个字符被 isalpha() 或者 isdigit() 检测后返回“真”，那么它被 isalnum() 检测后也一定会返回“真”。</p>
<p>标准 ASCII 编码共包含了 128 个字符，不同的字符属于不同的分类，我们在 <a href="[ctype.h](http://c.biancheng.net/ref/ctype_h/)">[ctype.h](http://c.biancheng.net/ref/ctype_h/)</a> 头文件中给出了详细的列表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释：&quot;amanaplanacanalpanama&quot; 是回文串</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-长度最小的子数组"><a href="#3-长度最小的子数组" class="headerlink" title="3.长度最小的子数组"></a>3.长度最小的子数组</h3><ul>
<li><p>暴力破解法 </p>
<p>时间复杂度 $O(n^2)$,从头到尾遍历所有满足&gt;=target的子数组，并将最短长度返回。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j ;</span><br><span class="line">        <span class="keyword">int</span> sum;</span><br><span class="line">        <span class="keyword">int</span> length = nums.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=target) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;nums.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;=target&amp;&amp;(j-i+<span class="number">1</span>)&lt;length)&#123;</span><br><span class="line">                    length = j - i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length==nums.<span class="built_in">size</span>()+<span class="number">1</span>?<span class="number">0</span>:length;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>滑动窗口法</p>
<p>减少了每次重新定位右侧边界的时间。先不断增大右侧边界以达到target，再不断缩减左侧边界以保证最小长度。近遍历一次数组并随时存储满足target的最小长度。</p>
<p>时间复杂度$O(2n)$,空间复杂度$O(1)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = nums.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j&lt;nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">                length = <span class="built_in">min</span>(length,j-i+<span class="number">1</span>);</span><br><span class="line">                sum -= nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length==nums.<span class="built_in">size</span>()+<span class="number">1</span>?<span class="number">0</span>:length;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="4-二维数组-旋转矩阵"><a href="#4-二维数组-旋转矩阵" class="headerlink" title="4.二维数组 旋转矩阵"></a>4.二维数组 旋转矩阵</h3><p>给你一幅由 <code>N × N</code> 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。</p>
<p>不占用额外内存空间能否做到？</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227103311271.png" alt="image-20220227103311271"></p>
<ul>
<li>借助辅助矩阵  (空间复杂度 $O(N^2)$)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; newMatix = matrix;<span class="comment">//此处数组的拷贝是值拷贝 获得一个新的数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                newMatix[j][n<span class="number">-1</span>-i] = matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        matrix = newMatix;<span class="comment">//此处同样是值拷贝</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>每次旋转4个位置  空间复杂度$O(1)$</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227105639686.png" alt="image-20220227105639686"></p>
</li>
</ul>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227105700261.png" alt="image-20220227105700261"></p>
<p>关键变换：<img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227105728343.png" alt="image-20220227105728343"></p>
<p>代入4次：</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227105750529.png" alt="image-20220227105750529"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;<span class="comment">// n为奇数的n-1/2 == n为偶数的n/2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;(n+<span class="number">1</span>)/<span class="number">2</span>;j++)&#123;<span class="comment">//n为奇数的n+1/2 == n为偶数的n/2</span></span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            temp = matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[n-j<span class="number">-1</span>][i];</span><br><span class="line">            matrix[n-j<span class="number">-1</span>][i] = matrix[n-i<span class="number">-1</span>][n<span class="number">-1</span>-j];</span><br><span class="line">            matrix[n-i<span class="number">-1</span>][n<span class="number">-1</span>-j] = matrix[j][n<span class="number">-1</span>-i]; </span><br><span class="line">            matrix[j][n<span class="number">-1</span>-i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对称2次 空间复杂度$O(1)$</li>
</ul>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227110155841.png" alt="image-20220227110155841"></p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227110238605.png" alt="image-20220227110238605"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(matrix[i][j],matrix[n<span class="number">-1</span>-i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(matrix[i][j],matrix[j][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a,<span class="keyword">int</span>&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-零矩阵"><a href="#5-零矩阵" class="headerlink" title="5.零矩阵"></a>5.零矩阵</h3><p>编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。</p>
<ul>
<li>空间复杂度$O(n^2)$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">row</span><span class="params">(m)</span>, <span class="title">col</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!matrix[i][j]) &#123;</span><br><span class="line">                    row[i] = col[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (row[i] || col[j]) &#123;</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>空间复杂度$O(1)$ 2个存储空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> col = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!matrix[i][<span class="number">0</span>])&#123;</span><br><span class="line">            row = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!matrix[<span class="number">0</span>][j])&#123;</span><br><span class="line">            col = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!matrix[i][j])&#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((!matrix[<span class="number">0</span>][j])||(!matrix[i][<span class="number">0</span>]))&#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(row)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(col)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>空间复杂度$O(1)$ 1个存储空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> flag_col0 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!matrix[i][<span class="number">0</span>]) &#123;</span><br><span class="line">            flag_col0 = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!matrix[i][j]) &#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!matrix[i][<span class="number">0</span>] || !matrix[<span class="number">0</span>][j]) &#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag_col0) &#123;</span><br><span class="line">            matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组类算法（双指针）</tag>
      </tags>
  </entry>
  <entry>
    <title>数组类算法笔记</title>
    <url>/2022/03/01/%E6%95%B0%E7%BB%84%E7%B1%BB%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="数组类算法笔记2"><a href="#数组类算法笔记2" class="headerlink" title="数组类算法笔记2"></a>数组类算法笔记2</h1><span id="more"></span>
<h1 id="数组类算法笔记（双指针）"><a href="#数组类算法笔记（双指针）" class="headerlink" title="数组类算法笔记（双指针）"></a>数组类算法笔记（双指针）</h1><h1 id="数组类算法笔记（双指针）-1"><a href="#数组类算法笔记（双指针）-1" class="headerlink" title="数组类算法笔记（双指针）"></a>数组类算法笔记（双指针）</h1><ul>
<li><h3 id="1-寻找数组的中心索引"><a href="#1-寻找数组的中心索引" class="headerlink" title="1.寻找数组的中心索引"></a>1.寻找数组的中心索引</h3><p>给你一个整数数组 nums ，请计算数组的 中心下标 。</p>
<p>数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>
<p>如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>
<p>如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。</p>
</li>
<li><p>遍历整个数组，分别计算中轴两侧数值和是否相等。(计算量大，每次需要计算两边数组的和，超时)</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot;</span><br><span class="line">        <span class="keyword">for</span>(pivot =<span class="number">0</span>;pivot&lt;nums.<span class="built_in">size</span>();pivot ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sum</span>(nums,<span class="number">0</span>,pivot<span class="number">-1</span>) == <span class="built_in">sum</span>(nums,pivot+<span class="number">1</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> pivot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="number">-1</span> || left == nums.<span class="built_in">size</span>()) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left;i&lt;=right;i++)&#123;</span><br><span class="line">            res += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>先计算整个数组的和，删去中轴元素即为右侧和，比较当前左侧和右侧和是否相等，不相等则给左侧和加上删去的数，进行下一次遍历。</p>
<p>减少了重复计算的工作量，不需要每次循环都计算左右两侧的元素和。</p>
<ol>
<li><p>先求得数组中所有元素之和sum；</p>
</li>
<li><p>遍历数组，取当前下标左边的元素之和left_sum，同时sum减去已遍历元素，比较二者是否相等，相等则返回当前下标；</p>
</li>
<li>遍历结束，代表没有中心索引，返回-1；</li>
</ol>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lsum = <span class="number">0</span>;<span class="comment">//中轴元素左侧元素之和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pivot = <span class="number">0</span>; pivot &lt;nums.<span class="built_in">size</span>();pivot++)&#123;</span><br><span class="line">            sum -= nums[pivot];</span><br><span class="line">            <span class="keyword">if</span>(lsum == sum) <span class="keyword">return</span> pivot;</span><br><span class="line">            lsum += nums[pivot];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-搜索数组插入位置"><a href="#2-搜索数组插入位置" class="headerlink" title="2.搜索数组插入位置"></a>2.搜索数组插入位置</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>请必须使用时间复杂度为 O(log n) 的算法。</p>
<ul>
<li><p>最简单的思路</p>
<ol>
<li>如果数组中的值大于或者等于target，直接return</li>
<li>如果全部遍历完证明target是最大的数，直接插入末尾</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]&gt;=target) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>二分查找，</p>
<p><strong>前提是查找的数组是一个有序数组。如果二分查找没有找到结果，则left所在位置即为查找数字的期望所在位置！！！</strong></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-合并数组"><a href="#3-合并数组" class="headerlink" title="3.合并数组"></a>3.合并数组</h3><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p>
<p>示例 1：</p>
<p>输入：intervals = [[1,3],[2,6],[8,10],[15,18]]<br>输出：[[1,6],[8,10],[15,18]]<br>解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</p>
<p>返回vector的最后一个元素的引用 vec.back()</p>
<p>思路：首先，我们将列表中的区间按照左端点升序排序。然后我们将第一个区间加入 merged 数组中，并按顺序依次考虑之后的每个区间：</p>
<p>如果当前区间的左端点在数组 merged 中最后一个区间的右端点之后，那么它们不会重合，我们可以直接将这个区间加入数组 merged 的末尾；</p>
<p>否则，它们重合，我们需要用当前区间的右端点更新数组 merged 中最后一个区间的右端点，将其置为二者的较大值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        l = intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        r = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        res.<span class="built_in">push_back</span>(intervals[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;intervals.<span class="built_in">size</span>();i++)&#123; <span class="comment">//size()返回的是二维数组中元素的个数</span></span><br><span class="line">            <span class="keyword">if</span>(r&lt;intervals[i][<span class="number">0</span>])&#123;</span><br><span class="line">                l = intervals[i][<span class="number">0</span>];</span><br><span class="line">                r = intervals[i][<span class="number">1</span>];</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.<span class="built_in">back</span>()[<span class="number">1</span>] = <span class="built_in">max</span>(r,intervals[i][<span class="number">1</span>]); <span class="comment">//Returns a read/write reference to the data at the last element of the vector.</span></span><br><span class="line">                r = res.<span class="built_in">back</span>()[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;intervals.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = intervals[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> r = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(!res.<span class="built_in">size</span>() || res.<span class="built_in">back</span>()[<span class="number">1</span>]&lt;l)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.<span class="built_in">back</span>()[<span class="number">1</span>] = <span class="built_in">max</span>(r,res.<span class="built_in">back</span>()[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-二维数组-对角线遍历"><a href="#4-二维数组-对角线遍历" class="headerlink" title="4.二维数组 对角线遍历"></a>4.二维数组 对角线遍历</h3><p>给你一个大小为 <code>m x n</code> 的矩阵 <code>mat</code> ，请以对角线遍历的顺序，用一个数组返回这个矩阵中的所有元素。</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220301205651422.png" alt="image-20220301205651422"></p>
<p>思路：</p>
<p>设元素当前行列坐标为(x,y),元素如果下一次要向左下移动(x+1, y-1)和右上移动(x-1, y+1)的话，并不会改变当前(行 + 列)的和;<br>if (x + y)是偶数, 那么下一次就是往右上移动, 是奇数的话下一次就是往左下移动；<br>左下 = [x+1, y-1]:<br>如果在最后一行 =&gt; 向右 <a href="先判断行, 防止在左下角的时候向下则越界">x+0, y+1</a>;<br>如果在第一列 =&gt; 向下 [x+1, y+0];<br>右上 = [x-1, y+1]:<br>如果在最后一列 =&gt; 向下 <a href="先判断列, 防止在右上角时候向右则越界">x+1, y+0</a>;<br>如果在第一行 =&gt; 向右 [x+0, y+1];</p>
<p>注意：左上右下的顺序各自有区分！！</p>
<ul>
<li>第一列也可以在最后一行，但最后一行的第一列必须向右（左下角）</li>
<li>最后一列也可以在第一行，但第一行的最后一列只能向下（右上角）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">findDiagonalOrder</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> row = mat.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> col = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> n = row*col;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(mat[x][y]);</span><br><span class="line">            <span class="keyword">if</span>((x+y)%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(y == col<span class="number">-1</span>)&#123;</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    x--;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(x == row<span class="number">-1</span>)&#123;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y == <span class="number">0</span>)&#123;</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    x++;</span><br><span class="line">                    y--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组类算法（双指针）</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列概述</title>
    <url>/2022/01/02/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><span id="more"></span>
<h2 id="1-消息队列概述"><a href="#1-消息队列概述" class="headerlink" title="1.消息队列概述"></a>1.消息队列概述</h2><h3 id="一、-消息队列概述"><a href="#一、-消息队列概述" class="headerlink" title="一、 消息队列概述"></a>一、 消息队列概述</h3><p>消息队列中间件是分布式系统中重要的组件，主要解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。</p>
<p>目前在生产环境，使用较多的消息队列有ActiveMQ、RabbitMQ、ZeroMQ、Kafka、MetaMQ、RocketMQ等。</p>
<h3 id="二、-消息队列应用场景"><a href="#二、-消息队列应用场景" class="headerlink" title="二、 消息队列应用场景"></a>二、 消息队列应用场景</h3><p>下面详细介绍一下消息队列在实际应用中常用的使用场景。场景分为异步处理、应用解耦、流量削锋和消息通讯四个场景。</p>
<h4 id="2-1-异步处理"><a href="#2-1-异步处理" class="headerlink" title="2.1 异步处理"></a>2.1 异步处理</h4><blockquote>
<p>场景说明：用户注册后，需要发送注册邮件和发送注册信息，传统的做法有两种：串行方式、并行方式</p>
</blockquote>
<h3 id="串行方式"><a href="#串行方式" class="headerlink" title="串行方式"></a>串行方式</h3><p>将注册信息写入数据库成功后，发送注册邮件，然后发送注册短信，而所有任务执行完成后，返回信息给客户端</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133531221.png" alt="image-20220105133531221"></p>
<p>串行方式</p>
<h3 id="并行方式"><a href="#并行方式" class="headerlink" title="并行方式"></a>并行方式</h3><p>将注册信息写入数据库成功后，同时进行发送注册邮件和发送注册短信的操作。而所有任务执行完成后，返回信息给客户端。同串行方式相比，并行方式可以提高执行效率，减少执行时间。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133827633.png" alt="image-20220105133827633"></p>
<p>并行方式</p>
<p>上面的比较可以发现，假设三个操作均需要50ms的执行时间，排除网络因素，则最终执行完成，串行方式需要150ms，而并行方式需要100ms。</p>
<p>因为cpu在单位时间内处理的请求数量是一致的，假设：CPU每1秒吞吐量是100此，则串行方式1秒内可执行的请求量为1000/150，不到7次；并行方式1秒内可执行的请求量为1000/100，为10次。</p>
<p>由上可以看出，传统串行和并行的方式会受到系统性能的局限，那么如何解决这个问题？<br> 我们需要引入消息队列，将不是必须的业务逻辑，异步进行处理，由此改造出来的流程为</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133600559.png" alt="image-20220105133600559"></p>
<p>引入消息队列，异步处理消息</p>
<p>根据上述的流程，用户的响应时间基本相当于将用户数据写入数据库的时间，发送注册邮件、发送注册短信的消息在写入消息队列后，即可返回执行结果，写入消息队列的时间很快，几乎可以忽略，也有此可以将系统吞吐量提升至20QPS，比串行方式提升近3倍，比并行方式提升2倍。</p>
<h4 id="2-2-应用解耦"><a href="#2-2-应用解耦" class="headerlink" title="2.2 应用解耦"></a>2.2 应用解耦</h4><blockquote>
<p>场景说明：用户下单后，订单系统需要通知库存系统。</p>
</blockquote>
<p>传统的做法为：订单系统调用库存系统的接口。如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133616537.png" alt="image-20220105133616537"></p>
<p>传统方式：调用库存接口</p>
<p>传统方式具有如下缺点：<br> -1. 假设库存系统访问失败，则订单减少库存失败，导致订单创建失败<br> -2. 订单系统同库存系统过度耦合</p>
<p>如何解决上述的缺点呢？需要引入消息队列，引入消息队列后的架构如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133627872.png" alt="image-20220105133627872"></p>
<p>引入消息队列，实现应用解耦</p>
<ul>
<li>订单系统：用户下单后，订单系统进行数据持久化处理，然后将消息写入消息队列，返回订单创建成功</li>
<li>库存系统：使用拉/推的方式，获取下单信息，库存系统根据订单信息，进行库存操作。</li>
</ul>
<p>假如在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其后续操作了。由此实现了订单系统与库存系统的应用解耦。</p>
<h4 id="2-3-流量削锋"><a href="#2-3-流量削锋" class="headerlink" title="2.3 流量削锋"></a>2.3 流量削锋</h4><p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛。</p>
<blockquote>
<p>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p>
</blockquote>
<ol>
<li>可以控制参与活动的人数；</li>
<li>可以缓解短时间内高流量对应用的巨大压力；</li>
</ol>
<p>流量削锋处理方式系统图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133638337.png" alt="image-20220105133638337"></p>
<p>流量削锋方式系统图</p>
<ol>
<li>服务器在接收到用户请求后，首先写入消息队列。这时如果消息队列中消息数量超过最大数量，则直接拒绝用户请求或返回跳转到错误页面；</li>
<li>秒杀业务根据秒杀规则读取消息队列中的请求信息，进行后续处理。</li>
</ol>
<h4 id="2-4-日志处理"><a href="#2-4-日志处理" class="headerlink" title="2.4 日志处理"></a>2.4 日志处理</h4><p>日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133649540.png" alt="image-20220105133649540"></p>
<p>消息队列应用于日志处理的架构</p>
<ul>
<li>日志采集客户端：负责日志数据采集，定时写受写入Kafka队列；</li>
<li>Kafka消息队列：负责日志数据的接收，存储和转发；</li>
<li>日志处理应用：订阅并消费kafka队列中的日志数据；</li>
</ul>
<p>这种架构在实际开发中的应用，可以参照案例：<a href="https://link.jianshu.com?t=http://cloud.51cto.com/art/201507/484338.htm">新浪技术分享：我们如何扛下32亿条实时日志的分析处理</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133703715.png" alt="image-20220105133703715"></p>
<p>服务的技术架构设计</p>
<ol>
<li>Kafka：接收用户日志的消息队列。</li>
<li>Logstash：做日志解析，统一成JSON输出给Elasticsearch。</li>
<li>Elasticsearch：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能。</li>
<li>Kibana：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因。</li>
</ol>
<h4 id="2-5-消息通讯"><a href="#2-5-消息通讯" class="headerlink" title="2.5 消息通讯"></a>2.5 消息通讯</h4><p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列、聊天室等。</p>
<h3 id="点对点通讯"><a href="#点对点通讯" class="headerlink" title="点对点通讯"></a>点对点通讯</h3><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133713336.png" alt="image-20220105133713336"></p>
<p>点对点通讯架构设计</p>
<p>在点对点通讯架构设计中，客户端A和客户端B共用一个消息队列，即可实现消息通讯功能。</p>
<h3 id="聊天室通讯"><a href="#聊天室通讯" class="headerlink" title="聊天室通讯"></a>聊天室通讯</h3><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133751627.png" alt="image-20220105133751627"></p>
<p>聊天室通讯架构设计</p>
<p>客户端A、客户端B、直至客户端N订阅同一消息队列，进行消息的发布与接收，即可实现聊天通讯方案架构设计。</p>
<h3 id="三、-消息中间件示例"><a href="#三、-消息中间件示例" class="headerlink" title="三、 消息中间件示例"></a>三、 消息中间件示例</h3><h4 id="3-1-电商系统"><a href="#3-1-电商系统" class="headerlink" title="3.1 电商系统"></a>3.1 电商系统</h4><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133854509.png" alt="image-20220105133854509"></p>
<p>电商系统架构示意图</p>
<p>消息队列采用高可用、可持久化的消息中间件。比如Active MQ，Rabbit MQ，Rocket MQ。</p>
<ul>
<li>应用将主干逻辑处理完成后，写入消息队列。消息发送是否成功可以开启消息的确认模式。（消息队列返回消息接收成功状态后，应用再返回，这样保障消息的完整性）</li>
<li>扩展流程（发短信、配送处理）订阅队列消息。采用推或拉的方式获取消息并处理。</li>
<li>消息将应用解耦的同时，带来了数据一致性问题，可以采用最终一致性方式解决。比如主数据写入数据库，扩展应用根据消息队列，并结合数据库方式实现基于消息队列的后续处理。</li>
</ul>
<h4 id="3-2-日志收集系统"><a href="#3-2-日志收集系统" class="headerlink" title="3.2 日志收集系统"></a>3.2 日志收集系统</h4><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133903358.png" alt="image-20220105133903358"></p>
<p>日志收集系统架构示意图</p>
<p>分为Zookeeper注册中心，日志收集客户端，Kafka集群和Storm集群（OtherApp）四部分组成。</p>
<ul>
<li>Zookeeper注册中心，提出负载均衡和地址查找服务；</li>
<li>日志收集客户端，用于采集应用系统的日志，并将数据推送到kafka队列；</li>
<li>Kafka集群：接收，路由，存储，转发等消息处理；</li>
<li>Storm集群：与OtherApp处于同一级别，采用拉的方式消费队列中的数据；</li>
</ul>
<h3 id="四、JMS消息服务"><a href="#四、JMS消息服务" class="headerlink" title="四、JMS消息服务"></a>四、JMS消息服务</h3><p>讲消息队列就不得不提JMS 。JMS（Java Message Service,Java消息服务）API是一个消息服务的标准/规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。<br> 在EJB架构中，有消息bean可以无缝的与JM消息服务集成。在J2EE架构模式中，有消息服务者模式，用于实现消息与应用直接的解耦。</p>
<h4 id="4-1-消息模型"><a href="#4-1-消息模型" class="headerlink" title="4.1 消息模型"></a>4.1 消息模型</h4><p>在JMS标准中，有两种消息模型P2P（Point to Point）,Publish/Subscribe(Pub/Sub)。</p>
<h3 id="4-1-1-P2P模式"><a href="#4-1-1-P2P模式" class="headerlink" title="4.1.1 P2P模式"></a>4.1.1 P2P模式</h3><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133959940.png" alt="image-20220105133959940"></p>
<p>P2P模式</p>
<p>P2P模式包含三个角色：消息队列（Queue），发送者(Sender)，接收者(Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</p>
<p>P2P的特点</p>
<ul>
<li>每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在消息队列中)</li>
<li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列</li>
<li>接收者在成功接收消息之后需向队列应答成功</li>
</ul>
<p>如果希望发送的每个消息都会被成功处理的话，那么需要P2P模式。<br> 4.1.2 Pub/Sub模式</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133949330.png" alt="image-20220105133949330"></p>
<p>Pub/Sub模式</p>
<p>包含三个角色：主题（Topic），发布者（Publisher），订阅者（Subscriber） 。多个发布者将消息发送到Topic,系统将这些消息传递给多个订阅者。</p>
<p>Pub/Sub的特点</p>
<ul>
<li>每个消息可以有多个消费者</li>
<li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。</li>
<li>为了消费消息，订阅者必须保持运行的状态。</li>
</ul>
<p>为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。<br> 如果希望发送的消息可以不被做任何处理、或者只被一个消息者处理、或者可以被多个消费者处理的话，那么可以采用Pub/Sub模型。</p>
<h4 id="4-2消息消费"><a href="#4-2消息消费" class="headerlink" title="4.2消息消费"></a>4.2消息消费</h4><p>在JMS中，消息的产生和消费都是异步的。对于消费来说，JMS的消息者可以通过两种方式来消费消息。</p>
<ol>
<li>同步<br>订阅者或接收者通过receive方法来接收消息，receive方法在接收到消息之前（或超时之前）将一直阻塞；</li>
<li>异步<br>订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法。</li>
</ol>
<p>JNDI：Java命名和目录接口,是一种标准的Java命名系统接口。可以在网络上查找和访问服务。通过指定一个资源名称，该名称对应于数据库或命名服务中的一个记录，同时返回资源连接建立所必须的信息。<br> JNDI在JMS中起到查找和访问发送目标或消息来源的作用。</p>
<h4 id="4-3JMS编程模型"><a href="#4-3JMS编程模型" class="headerlink" title="4.3JMS编程模型"></a>4.3JMS编程模型</h4><h3 id="1-ConnectionFactory"><a href="#1-ConnectionFactory" class="headerlink" title="1. ConnectionFactory"></a>1. ConnectionFactory</h3><p>创建Connection对象的工厂，针对两种不同的JMS消息模型，分别有QueueConnectionFactory和TopicConnectionFactory两种。可以通过JNDI来查找ConnectionFactory对象。</p>
<h3 id="2-Destination"><a href="#2-Destination" class="headerlink" title="2. Destination"></a>2. Destination</h3><p>Destination的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的Destination是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的Destination也是某个队列或主题（即消息来源）。<br> 所以，Destination实际上就是两种类型的对象：Queue、Topic可以通过JNDI来查找Destination。</p>
<h3 id="3-Connection"><a href="#3-Connection" class="headerlink" title="3. Connection"></a>3. Connection</h3><p>Connection表示在客户端和JMS系统之间建立的链接（对TCP/IP Socket的包装）。Connection可以产生一个或多个Session。跟ConnectionFactory一样，Connection也有两种类型：QueueConnection和TopicConnection。</p>
<h3 id="4-Session"><a href="#4-Session" class="headerlink" title="4. Session"></a>4. Session</h3><p>Session是操作消息的接口。可以通过session创建生产者、消费者、消息等。Session提供了事务的功能。当需要使用session发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。同样，也分QueueSession和TopicSession。</p>
<h3 id="5-消息的生产者"><a href="#5-消息的生产者" class="headerlink" title="5. 消息的生产者"></a>5. 消息的生产者</h3><p>消息生产者由Session创建，并用于将消息发送到Destination。同样，消息生产者分两种类型：QueueSender和TopicPublisher。可以调用消息生产者的方法（send或publish方法）发送消息。</p>
<h3 id="6-消息消费者"><a href="#6-消息消费者" class="headerlink" title="6. 消息消费者"></a>6. 消息消费者</h3><p>消息消费者由Session创建，用于接收被发送到Destination的消息。两种类型：QueueReceiver和TopicSubscriber。可分别通过session的createReceiver(Queue)或createSubscriber(Topic)来创建。当然，也可以session的creatDurableSubscriber方法来创建持久化的订阅者。</p>
<h3 id="7-MessageListener"><a href="#7-MessageListener" class="headerlink" title="7. MessageListener"></a>7. MessageListener</h3><p>消息监听器。如果注册了消息监听器，一旦消息到达，将自动调用监听器的onMessage方法。EJB中的MDB（Message-Driven Bean）就是一种MessageListener。</p>
<p>深入学习JMS对掌握JAVA架构、EJB架构有很好的帮助，消息中间件也是大型分布式系统必须的组件。本次分享主要做全局性介绍，具体的深入需要大家学习，实践，总结，领会。</p>
<h3 id="五、常用消息队列"><a href="#五、常用消息队列" class="headerlink" title="五、常用消息队列"></a>五、常用消息队列</h3><p>一般商用的容器，比如WebLogic，JBoss，都支持JMS标准，开发上很方便。但免费的比如Tomcat，Jetty等则需要使用第三方的消息中间件。本部分内容介绍常用的消息中间件（Active MQ，Rabbit MQ，Zero MQ，Kafka）以及他们的特点。</p>
<h3 id="5-1-ActiveMQ"><a href="#5-1-ActiveMQ" class="headerlink" title="5.1 ActiveMQ"></a>5.1 ActiveMQ</h3><p>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现，尽管JMS规范出台已经是很久的事情了，但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。<br> ActiveMQ特性如下：</p>
<ol>
<li>多种语言和协议编写客户端。<br>语言: Java,C,C++,C#,Ruby,Perl,Python,PHP。<br>应用协议： OpenWire,Stomp REST,WS Notification,XMPP,AMQP</li>
<li>完全支持JMS1.1和J2EE 1.4规范 （持久化，XA消息，事务)</li>
<li>对Spring的支持。<br>ActiveMQ可以很容易内嵌到使用Spring的系统里面去，而且也支持Spring2.0的特性</li>
<li>通过了常见J2EE服务器（如 Geronimo,JBoss 4,GlassFish,WebLogic)的测试，其中通过JCA 1.5 resource adaptors的配置，可以让ActiveMQ可以自动的部署到任何兼容J2EE 1.4 商业服务器上</li>
<li>支持多种传送协议：in-VM,TCP,SSL,NIO,UDP,JGroups,JXTA</li>
<li>支持通过JDBC和journal提供高速的消息持久化</li>
<li>从设计上保证了高性能的集群，客户端-服务器，点对点</li>
<li>支持Ajax</li>
<li>支持与Axis的整合</li>
<li>可以很容易得调用内嵌JMS provider，进行测试</li>
</ol>
<h3 id="5-2-RabbitMQ"><a href="#5-2-RabbitMQ" class="headerlink" title="5.2 RabbitMQ"></a>5.2 RabbitMQ</h3><p>RabbitMQ是流行的开源消息队列系统，用erlang语言开发。RabbitMQ是AMQP（高级消息队列协议）的标准实现。支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX，持久化。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133934962.png" alt="image-20220105133934962"></p>
<p>RabbitMQ结构图</p>
<p>上图中有几个重要概念：</p>
<ul>
<li>Broker：简单来说就是消息队列服务器实体。</li>
<li>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。</li>
<li>Queue：消息队列载体，每个消息都会被投入到一个或多个队列。</li>
<li>Binding：绑定，它的作用就是把Exchange和Queue按照路由规则绑定起来。</li>
<li>Routing Key：路由关键字，Exchange根据这个关键字进行消息投递。</li>
<li>vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。</li>
<li>producer：消息生产者，就是投递消息的程序。</li>
<li>consumer：消息消费者，就是接受消息的程序。</li>
<li>channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</li>
</ul>
<p>消息队列的使用过程，如下：</p>
<ol>
<li>客户端连接到消息队列服务器，打开一个channel。</li>
<li>客户端声明一个exchange，并设置相关属性。</li>
<li>客户端声明一个queue，并设置相关属性。</li>
<li>客户端使用routing key，在exchange和queue之间建立好绑定关系。</li>
<li>客户端投递消息到exchange。</li>
</ol>
<p>exchange接收到消息后，就根据消息的key和已经设置的binding，进行消息路由，将消息投递到一个或多个队列里。</p>
<h2 id="5-3-ZeroMQ"><a href="#5-3-ZeroMQ" class="headerlink" title="5.3 ZeroMQ"></a>5.3 ZeroMQ</h2><p>号称史上最快的消息队列，它实际类似于Socket的一系列接口，他跟Socket的区别是：普通的socket是端到端的（1:1的关系），而ZMQ却是可以N：M 的关系，人们对BSD套接字的了解较多的是点对点的连接，点对点连接需要显式地建立连接、销毁连接、选择协议（TCP/UDP）和处理错误等，而ZMQ屏蔽了这些细节，让你的网络编程更为简单。ZMQ用于node与node间的通信，node可以是主机或者是进程。<br> 引用官方的说法： “ZMQ(以下ZeroMQ简称ZMQ)是一个简单好用的传输层，像框架一样的一个socket library，他使得Socket编程更加简单、简洁和性能更高。是一个消息处理队列库，可在多个线程、内核和主机盒之间弹性伸缩。ZMQ的明确目标是“成为标准网络协议栈的一部分，之后进入Linux内核”。现在还未看到它们的成功。但是，它无疑是极具前景的、并且是人们更加需要的“传统”BSD套接字之上的一层封装。ZMQ让编写高性能网络应用程序极为简单和有趣。”</p>
<p>特点是：</p>
<ul>
<li>高性能，非持久化；</li>
<li>跨平台：支持Linux、Windows、OS X等。</li>
<li>多语言支持； C、C++、Java、.NET、Python等30多种开发语言。</li>
<li>可单独部署或集成到应用中使用；</li>
<li>可作为Socket通信库使用。</li>
</ul>
<p>与RabbitMQ相比，ZMQ并不像是一个传统意义上的消息队列服务器，事实上，它也根本不是一个服务器，更像一个底层的网络通讯库，在Socket API之上做了一层封装，将网络通讯、进程通讯和线程通讯抽象为统一的API接口。支持“Request-Reply “，”Publisher-Subscriber“，”Parallel Pipeline”三种基本模型和扩展模型。</p>
<p>ZeroMQ高性能设计要点：</p>
<ol>
<li>无锁的队列模型<br>对于跨线程间的交互（用户端和session）之间的数据交换通道pipe，采用无锁的队列算法CAS；在pipe两端注册有异步事件，在读或者写消息到pipe的时，会自动触发读写事件。</li>
<li>批量处理的算法<br>对于传统的消息处理，每个消息在发送和接收的时候，都需要系统的调用，这样对于大量的消息，系统的开销比较大，zeroMQ对于批量的消息，进行了适应性的优化，可以批量的接收和发送消息。</li>
<li>多核下的线程绑定，无须CPU切换<br>区别于传统的多线程并发模式，信号量或者临界区， zeroMQ充分利用多核的优势，每个核绑定运行一个工作者线程，避免多线程之间的CPU切换开销。</li>
</ol>
<h2 id="5-4-Kafka"><a href="#5-4-Kafka" class="headerlink" title="5.4 Kafka"></a>5.4 Kafka</h2><p>Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群机来提供实时的消费。<br> Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：</p>
<ul>
<li>通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。（文件追加的方式写入数据，过期的数据定期删除）</li>
<li>高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。</li>
<li>支持通过Kafka服务器和消费机集群来分区消息。</li>
<li>支持Hadoop并行数据加载。</li>
</ul>
<p>Kafka相关概念</p>
<h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>Kafka集群包含一个或多个服务器，这种服务器被称为broker</p>
<h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</p>
<h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><p>Parition是物理上的概念，每个Topic包含一个或多个Partition.</p>
<h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>负责发布消息到Kafka Broker</p>
<h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>消息消费者，向Kafka Broker读取消息的客户端。</p>
<h3 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h3><p>每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</p>
<p>Kafka一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用。</p>
]]></content>
      <categories>
        <category>MessageQueue</category>
      </categories>
      <tags>
        <tag>MessageQueue</tag>
      </tags>
  </entry>
  <entry>
    <title>详解base64编码</title>
    <url>/2022/01/05/%E8%AF%A6%E8%A7%A3base64%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="详解Base64编码"><a href="#详解Base64编码" class="headerlink" title="详解Base64编码"></a>详解Base64编码</h1><span id="more"></span>
<p>Base64是网络上最常见的用于传输8bit字节码的编码方式之一，它基于64个可打印字符表示二进制数据。</p>
<h3 id="为什么使用Base64传输2进制字节码，而不是使用ASCII码传输？"><a href="#为什么使用Base64传输2进制字节码，而不是使用ASCII码传输？" class="headerlink" title="为什么使用Base64传输2进制字节码，而不是使用ASCII码传输？"></a>为什么使用Base64传输2进制字节码，而不是使用ASCII码传输？</h3><p>​        ASCII码 0-31 127是不可打印字符    32-126是可打印字符<br>ASCII码 0-31 127是不可打印字符    32-126是可打印字符</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220106003030035.png" alt="image-20220106003030035"></p>
<p>​    Base64被用于Http协议下传输二进制数据。（Http是文本协议，没法直接传输二进制数据）</p>
<p>​    Base64使用可打印的64个字符表示二进制数据。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220106000457348.png" alt="image-20220106000457348"></p>
<p>​    将字符串按照对应的编码转为二进制数值后，每6位作为一个Base64码。每3个字节转为4个Base64码，没有数据则用’=’补上空缺。1字节文本补2个‘=’，2字节文本补1个‘=’。Base64转码后的文本会比原来大1/3。</p>
<p>​    注意事项：</p>
<p>​    1）大多数编码是由字符串变为二进制，而Base64将二进制转换为zifuc</p>
<p>​    2）Base64不是一种加密</p>
<p>​    3）相同字符串的不同编码对应的Base64不一样。</p>
]]></content>
      <categories>
        <category>base64编码</category>
      </categories>
      <tags>
        <tag>base64编码</tag>
      </tags>
  </entry>
</search>
