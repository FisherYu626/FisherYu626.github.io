<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/2022/01/19/Docker/</url>
    <content><![CDATA[<h1 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h1><span id="more"></span>
<h1 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h1><h2 id="Docker基本组成："><a href="#Docker基本组成：" class="headerlink" title="Docker基本组成："></a>Docker基本组成：</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119165007270.png" alt="image-20220119165007270"></p>
<p><strong>镜像</strong>（image）</p>
<p>Docker镜像好比一个模板，可以通过这个模板创建容器服务，tomcat镜像==&gt;run ==&gt;tomcat 01容器（提供服务），通过镜像可以创建多个容器。</p>
<p><strong>容器</strong>(Container)</p>
<p>Docker利用容器技术，独立运行一个或一组应用程序，通过镜像来创建。</p>
<p>可以将容器理解为一个简易的linux系统。</p>
<p><strong>仓库</strong>(Repository)</p>
<p>仓库就是存放镜像的地方。</p>
<p>仓库分为公有仓库和私有仓库。</p>
<h2 id="Docker与虚拟机的区别："><a href="#Docker与虚拟机的区别：" class="headerlink" title="Docker与虚拟机的区别："></a>Docker与虚拟机的区别：</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119163814035.png" alt="image-20220119163814035" style="zoom: 50%;" /></p>
<p>虚拟机是一个缩小版的操作系统，不同的应用共用一个运行环境。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119163535959.png" alt="image-20220119163535959" style="zoom: 67%;" /></p>
<p>docker将不同的应用与其运行环境封装成一个个容器，并放置于OS内核上运行。不同容器之间相互隔离，每个容器有自己独立的文件系统。</p>
<h3 id="DevOps-开发、运维"><a href="#DevOps-开发、运维" class="headerlink" title="DevOps(开发、运维)"></a>DevOps(开发、运维)</h3><p><strong>应用更快速的交付和部署</strong></p>
<p>Docker:打包镜像发布测试，一键运行。</p>
<p><strong>更便捷的升级和扩缩容</strong></p>
<p>使用Docker之后，我们部署应用如同搭积木。</p>
<p><strong>更简单的系统运维</strong></p>
<p>在容器化之后，开发和测试环境高度一致。</p>
<p><strong>更高效的计算资源利用</strong></p>
<p>Docker是内核级别的虚拟化，可以在一个物理机上运行多个容器实例。</p>
<h3 id="Docker为什么比VM快？"><a href="#Docker为什么比VM快？" class="headerlink" title="Docker为什么比VM快？"></a>Docker为什么比VM快？</h3><ol>
<li><p>Docker有着比虚拟机更少的抽象层</p>
</li>
<li><p>Docker利用宿主机的内核，VM需要搭建额外的环境。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119184810155.png" alt="image-20220119184810155" style="zoom: 67%;" /></p>
<p>新建一个容器的时候，Docker不需要像虚拟机一样额外加载一个操作系统内核。</p>
</li>
</ol>
<h2 id="Docker-run运行机制"><a href="#Docker-run运行机制" class="headerlink" title="Docker run运行机制"></a>Docker run运行机制</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119183156875.png" alt="image-20220119183156875"></p>
<h2 id="Docker底层实现"><a href="#Docker底层实现" class="headerlink" title="Docker底层实现"></a>Docker底层实现</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220119184310423.png" alt="image-20220119184310423"></p>
<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@node10-desktop:/home/ubuntu# docker images -a</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   3 months ago   13.3kB</span><br></pre></td></tr></table></figure>
<p>可选选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">List images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             #展示所有镜像</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           Only show image IDs</span><br></pre></td></tr></table></figure>
<h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@node10-desktop:/home/ubuntu# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11992     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4591      [OK]    </span><br></pre></td></tr></table></figure>
<p>可选选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@node10-desktop:~$ docker search mysql --filter=STARS=3000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11992     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4591      [OK]</span><br></pre></td></tr></table></figure>
<p>搜索stars大于3000的。</p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker pull mysql</span><br><span class="line">Using default tag: latest #如果不写 tag ，默认是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Pull complete # 分层下载， docker iamges的核心 联合文件系统</span><br><span class="line">93619dbc5b36: Pull complete </span><br><span class="line">99da31dd6142: Pull complete </span><br><span class="line">626033c43d70: Pull complete </span><br><span class="line">37d5d7efb64e: Pull complete </span><br><span class="line">ac563158d721: Pull complete </span><br><span class="line">d2ba16033dad: Pull complete </span><br><span class="line">688ba7d5c01a: Pull complete </span><br><span class="line">00e060b6d11d: Pull complete </span><br><span class="line">1c04857f594f: Pull complete </span><br><span class="line">4d7cfa90e6ea: Pull complete </span><br><span class="line">e0431212d27d: Pull complete </span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709 #签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest #真实地址</span><br></pre></td></tr></table></figure>
<p>下载mysql 5.7版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@node10-desktop:~$ docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Already exists </span><br><span class="line">93619dbc5b36: Already exists </span><br><span class="line">99da31dd6142: Already exists </span><br><span class="line">626033c43d70: Already exists </span><br><span class="line">37d5d7efb64e: Already exists </span><br><span class="line">ac563158d721: Already exists </span><br><span class="line">d2ba16033dad: Already exists #以上层级内容共用之前版本</span><br><span class="line">0ceb82207cd7: Pull complete </span><br><span class="line">37f2405cae96: Pull complete </span><br><span class="line">e2482e017e53: Pull complete </span><br><span class="line">70deed891d42: Pull complete </span><br><span class="line">Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker rmi -f 容器id</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rmi -f 容器id 容器id 容器id 容器id  <span class="comment">#删除多个容器</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rmi -f $(docker images -aq)       <span class="comment">#删除全部容器</span></span></span><br><span class="line">ubuntu@node10-desktop:~$ docker rmi c20987f18b13 #按照镜像id删除</span><br><span class="line">Untagged: mysql:5.7</span><br><span class="line">Untagged: mysql@sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Deleted: sha256:c20987f18b130f9d144c9828df630417e2a9523148930dc3963e9d0dab302a76</span><br><span class="line">Deleted: sha256:6567396b065ee734fb2dbb80c8923324a778426dfd01969f091f1ab2d52c7989</span><br><span class="line">Deleted: sha256:0910f12649d514b471f1583a16f672ab67e3d29d9833a15dc2df50dd5536e40f</span><br><span class="line">Deleted: sha256:6682af2fb40555c448b84711c7302d0f86fc716bbe9c7dc7dbd739ef9d757150</span><br><span class="line">Deleted: sha256:5c062c3ac20f576d24454e74781511a5f96739f289edaadf2de934d06e910b92</span><br></pre></td></tr></table></figure>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;     容器名字 tomcat01 tomcat02 用于区分容器</span><br><span class="line">-d                后台方式运行</span><br><span class="line">-it               使用交互方式运行，进入容器内部查看内容</span><br><span class="line">-p                指定容器使用的端口 -p 8080</span><br><span class="line">	-p ip:主机端口:容器端口</span><br><span class="line">	-p 主机端口:容器端口(常用)</span><br><span class="line">	-p 容器端口</span><br><span class="line">	容器端口</span><br><span class="line">-P                随机指定端口</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">测试，启动并进入容器</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker run -it centos /bin/bash</span><br><span class="line">[root@ad604a65efa9 /]# ls         #查看内部的centos 基础版本 很多命令不完善</span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@ad604a65efa9 /]# exit       #退出</span><br></pre></td></tr></table></figure>
<h3 id="列出所有的运行的容器"><a href="#列出所有的运行的容器" class="headerlink" title="列出所有的运行的容器"></a>列出所有的运行的容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps     #列出所有正在运行的容器</span><br><span class="line">  -a   #列出所有正在和曾经运行的容器</span><br><span class="line">  -n=? #列出最近创建的n个容器</span><br><span class="line">  -q   #只显示容器的编号</span><br><span class="line">ubuntu@node10-desktop:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">ubuntu@node10-desktop:~$ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                       PORTS     NAMES</span><br><span class="line">ad604a65efa9   centos         &quot;/bin/bash&quot;   5 minutes ago   Exited (127) 3 minutes ago             sharp_jang</span><br><span class="line">a4688cab1ed2   feb5d9fea6a5   &quot;/hello&quot;      2 hours ago     Exited (0) 2 hours ago                 loving_gould</span><br><span class="line">aaf4c88c96a7   feb5d9fea6a5   &quot;/hello&quot;      2 hours ago     Exited (0) 2 hours ago                 serene_lehmann</span><br></pre></td></tr></table></figure>
<h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit        #直接容器停止并退出</span><br><span class="line">Ctrl + P +Q #容器不停止退出</span><br></pre></td></tr></table></figure>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id                #删除指定的容器</span><br><span class="line">docker rm -f $(docker ps -aq)   #删除所有的容器 -f强制删除（可以删除正在运行的容器）</span><br><span class="line">docker ps -a -q | xargs docker rm #管道方式删除所有容器</span><br></pre></td></tr></table></figure>
<h3 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id   #启动</span><br><span class="line">docker restart 容器id #重启</span><br><span class="line">docker stop 容器id    #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id    #强制停止</span><br></pre></td></tr></table></figure>
<h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><h3 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令 Docker run -d 镜像名</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker run -d centos</span><br><span class="line">3f38613fb472b3fbdd6f746192f3e8e11867fcc63d9cf8991ea8cfb07c96dbd3</span><br><span class="line">ubuntu@node10-desktop:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">问题 docker ps ，cent os 停止了</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑：docker,容器使用后台运行，必须有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nginx，容器启动后，会发现自己没有提供服务，就会立刻停止。</span></span><br></pre></td></tr></table></figure>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -tf --tail 容器 #没有日志</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">自己编写一段shell脚本，并在容器中执行</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker run -d centos /bin/sh -c &quot;while true;do echo fisher626;sleep 1;done&quot; </span><br><span class="line">3815fe287c92d7145e4da54769adb8552c7e95df51de0e0fe8876b71e81c3622</span><br><span class="line">ubuntu@node10-desktop:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS     NAMES</span><br><span class="line">3815fe287c92   centos    &quot;/bin/sh -c &#x27;while t…&quot;   9 seconds ago   Up 8 seconds             distracted_pare</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看日志</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker logs -tf --tail 10 3815fe287c92#显示最新的10条日志</span><br><span class="line">2022-01-19T13:01:33.174886561Z fisher626</span><br><span class="line">2022-01-19T13:01:34.178405517Z fisher626</span><br><span class="line">2022-01-19T13:01:35.181766267Z fisher626</span><br><span class="line">2022-01-19T13:01:36.185055836Z fisher626</span><br><span class="line">2022-01-19T13:01:37.188711727Z fisher626</span><br><span class="line">2022-01-19T13:01:38.192378519Z fisher626</span><br><span class="line">2022-01-19T13:01:39.196042380Z fisher626</span><br><span class="line">2022-01-19T13:01:40.199651762Z fisher626</span><br><span class="line">2022-01-19T13:01:41.203364507Z fisher626</span><br><span class="line">2022-01-19T13:01:42.206862755Z fisher626</span><br><span class="line">2022-01-19T13:01:43.210545827Z fisher626</span><br><span class="line">2022-01-19T13:01:44.214201098Z fisher626</span><br><span class="line">2022-01-19T13:01:45.217870760Z fisher626</span><br></pre></td></tr></table></figure>
<h3 id="查看容器中的进程信息"><a href="#查看容器中的进程信息" class="headerlink" title="查看容器中的进程信息"></a>查看容器中的进程信息</h3> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker top 容器id</span></span><br><span class="line">ubuntu@node10-desktop:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">c3a047896877   centos    &quot;/bin/sh -c &#x27;while t…&quot;   14 seconds ago   Up 13 seconds             serene_thompson</span><br><span class="line">ubuntu@node10-desktop:~$ docker top c3a047896877</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                23055               23033               0                   21:04               ?                   00:00:00            /bin/sh -c while true;do echo fisher626;sleep 1;done</span><br><span class="line">root                23167               23055               0                   21:05               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br></pre></td></tr></table></figure>
<h3 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line">ubuntu@node10-desktop:~$ docker inspect c3a047896877</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-01-19T13:04:58.365195048Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo fisher626;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 23055,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2022-01-19T13:04:58.650652312Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007/c3a0478968772430d034f0c533c3124327a51840d203394915b29113e4ba7007-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/serene_thompson&quot;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h3>]]></content>
      <categories>
        <category>容器虚拟化</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dp算法笔记</title>
    <url>/2022/04/17/dp%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><span id="more"></span>
<h2 id="1-买卖股票的最佳时机"><a href="#1-买卖股票的最佳时机" class="headerlink" title="1.买卖股票的最佳时机"></a>1.买卖股票的最佳时机</h2><p>给定一个数组 prices ，其中 prices[i] 表示股票第 i 天的价格。</p>
<p>在每一天，你可能会决定购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以购买它，然后在 同一天 出售。<br>返回 你能获得的 最大 利润 。</p>
<ul>
<li>动态规划</li>
</ul>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220311110719693.png" alt="image-20220311110719693"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//p[i][1]表示第i天手里还有股票</span></span><br><span class="line"><span class="comment">//p[i][0]表示第i天手里没有股票 </span></span><br><span class="line"><span class="keyword">int</span> p[n][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//初始状态</span></span><br><span class="line">p[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">p[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="comment">//状态转移方程</span></span><br><span class="line">    p[i][<span class="number">1</span>] = <span class="built_in">max</span>(p[i<span class="number">-1</span>][<span class="number">1</span>],p[i<span class="number">-1</span>][<span class="number">0</span>]-prices[i]);</span><br><span class="line">    p[i][<span class="number">0</span>] = <span class="built_in">max</span>(p[i<span class="number">-1</span>][<span class="number">0</span>],p[i<span class="number">-1</span>][<span class="number">1</span>]+prices[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后一天肯定卖出手里所有股票</span></span><br><span class="line"><span class="keyword">return</span> p[n<span class="number">-1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<ul>
<li>贪心算法</li>
</ul>
<p>因为$p[i][j] = p[i]p[i+1]+]p[i+1]p[i+2]+···+p[j-1]p[j]$,实际为多个间隔为1的收益组成。所以可以计算每一天的收益并将收益为负的那天之前提前卖出，即可得到最大利润。</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220311111044475.png" alt="image-20220311111044475"></p>
<h2 id="2-分割字符串的最高得分"><a href="#2-分割字符串的最高得分" class="headerlink" title="2.分割字符串的最高得分"></a>2.分割字符串的最高得分</h2><p>给定一个字符串，当子串中一个字母出现的次数为偶数次时，该子串得1分，当出现次数为奇数次时，减一分。</p>
<p>求该字符串的最高得分：</p>
<p>例如： aabb 得分为2 aba得分为0</p>
<p>测试用例：ababcac 得分为2</p>
<p>状态转移方程，对一个子串进行一次分割，可得其最高得分：</p>
<script type="math/tex; mode=display">dp[i] = max(dp[j]+score[j+1,i])</script><p>其中：$score[j+1,i]$为由下表$j+1$到$i$的字符串的得分。</p>
<p>代码实现:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">score</span><span class="params">(vector&lt;<span class="keyword">char</span>&gt;&amp; s,<span class="keyword">int</span> start,<span class="keyword">int</span> end )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    unordered_map&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(start&lt;=end)&#123;</span><br><span class="line">        m[s[start]]++;</span><br><span class="line">        start++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.second%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            res ++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaxScore</span><span class="params">(vector&lt;<span class="keyword">char</span>&gt;&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">-1</span>*n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;=i<span class="number">-1</span>;j++) &#123;</span><br><span class="line">            temp = <span class="built_in">max</span>(p[j]+<span class="built_in">score</span>(s,j+<span class="number">1</span>,i),temp);</span><br><span class="line">        &#125;</span><br><span class="line">        p[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">char</span>&gt; s&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="built_in">findMaxScore</span>(s);</span><br><span class="line">    cout&lt;&lt;num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>dp算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习笔记</title>
    <url>/2022/07/05/c-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="c-学习笔记"><a href="#c-学习笔记" class="headerlink" title="c++学习笔记"></a>c++学习笔记</h1><span id="more"></span>
<h1 id="A-语法基础"><a href="#A-语法基础" class="headerlink" title="A.语法基础"></a>A.语法基础</h1><h2 id="1-宏定义："><a href="#1-宏定义：" class="headerlink" title="1.宏定义："></a>1.宏定义：</h2><p><img src="C:\Users\www98\AppData\Roaming\Typora\typora-user-images\image-20211018185259169.png" alt=""></p>
<p>宏替换发生的4种情况：</p>
<p>1.文件包含，将源程序中的#include扩展到文件中正文，将包含.h的文件展开到#include所在处</p>
<p>2.条件编译：预处理器根据#if和#ifdef等编译命令及其后的条件，将源程序中的某部分包含进来或排除在外，通常把排除在外的语句转换成空行。</p>
<p>3.宏展开：预处理器将源程序文件中出现的对宏的引用展开（替换）成相应的宏定义，即本文所说的#define的功能，由预处理器来完成。<br>  经过预处理器处理的源程序与之前的源程序有所有不同，在这个阶段所进行的工作只是纯粹的替换与展开，没有任何计算功能。</p>
<h2 id="2-C-接口（抽象类）"><a href="#2-C-接口（抽象类）" class="headerlink" title="2.C++ 接口（抽象类）"></a>2.C++ 接口（抽象类）</h2><p>如果一个类中至少包含一个纯虚函数，则这个类是一个抽象类。</p>
<p>纯虚函数在声明时使用“=0”来指定。</p>
<h2 id="3-c-的默认初始化、列表初始化、值初始化："><a href="#3-c-的默认初始化、列表初始化、值初始化：" class="headerlink" title="3.c++的默认初始化、列表初始化、值初始化："></a>3.c++的默认初始化、列表初始化、值初始化：</h2><p>初始化不是赋值，初始化的含义是创建变量时赋予一个初始值；赋值的含义是把对象的当前值擦除，而以一个新值代替。</p>
<ul>
<li>默认初始化</li>
</ul>
<p>如果定义变量时没有指定初值，则变量被默认初始化，变量被赋予默认值，值由自己的类型确定。</p>
<p>如果内置数据类型未被显式初始化，它的值由定义的位置决定。定义于任何函数体之外的变量被初始化为0，定义在函数体内部的内置类型变量不被初始化，则其值为未定义（未初始化的变量含有一个不确定的值）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数体外定义的变量会默认初始化</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> aa[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//函数体内定义表的变量不会默认初始化</span></span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> bb[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: aa )&#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i: bb )&#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220514170125341.png" alt="image-20220514170125341"></p>
<p>绝大多数类支持无需显式初始化而定义对象，这样的类会为对象提供一个合适的默认值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::string res;</span><br></pre></td></tr></table></figure>
<p>res非显式的初始化为一个空字符串。</p>
<p>一些类要求对象显式初始化，如果创建该类的一个对象却未显式初始化，会引发错误。</p>
<p>默认初始化创建一个指定类型的空vector</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;</span><br></pre></td></tr></table></figure>
<p>在后续使用可以高效的添加元素</p>
<ul>
<li>列表初始化</li>
</ul>
<p>c++11提出的新标准，允许使用 用花括号括起来的 0个或多个初始元素 被赋予vector</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; s = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;aba&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h2><p>静态链接、动态链接</p>
<ul>
<li>静态链接</li>
</ul>
<p>链接时将需要用到的函数或过程链接到生成的可执行文件中，就算把静态库删除也不会影响到可执行程序的执行，生成的静态链接库，windows下以.lib为后缀，linux下以.a为后缀。</p>
<ul>
<li>动态链接</li>
</ul>
<p>链接的时候没有把需要用到的函数代码链接进去，而是在执行的过程中找要链接的函数，生成的可执行文件没有函数代码，只包含重定位信息，当你删除动态链接库后，可执行文件不能执行。动态链接库windows下为.dll，linux下为.so。</p>
<h2 id="5-include-lt-gt-和”-“的区别"><a href="#5-include-lt-gt-和”-“的区别" class="headerlink" title="5.include &lt;&gt;和” “的区别"></a>5.include &lt;&gt;和” “的区别</h2><ol>
<li>&lt;&gt;的头文件是系统文件，””的头文件是自定义文件</li>
<li>编译器预处理阶段的查找路径不一样</li>
</ol>
<p>查找路径</p>
<ul>
<li>&lt;&gt; 编译器设置的头文件路径-&gt;系统变量</li>
<li>“”当前头文件目录-&gt;编译器设置的头文件路径-&gt;系统变量</li>
</ul>
<h2 id="6-说说const和define的区别"><a href="#6-说说const和define的区别" class="headerlink" title="6.说说const和define的区别"></a>6.说说const和define的区别</h2><p>const用于定义常量</p>
<p>define用于定义宏，宏也可以用于定义常量</p>
<ol>
<li>const生效于编译的阶段，define生效于预处理阶段</li>
<li>const定义的常量，是c语言存储在内存中，需要额外内存空间的，define定义的常量在运行时直接是操作数，不会放在内存中。</li>
<li>const定义的常量是带类型的，define定义的常量是不带类型的，define定义的常量不利于类型检查。</li>
</ol>
<h2 id="7-const"><a href="#7-const" class="headerlink" title="7.const"></a>7.const</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a;<span class="comment">//a是常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *a;<span class="comment">//a是指向int常量的指针</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> *a;<span class="comment">//a是指向int常量的指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> a;<span class="comment">//a是指向int的常量指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> a;<span class="comment">//a是指向常量int的常量指针</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> * 是常量指针</span><br><span class="line"></span><br><span class="line">* <span class="keyword">const</span> 是指针常量</span><br></pre></td></tr></table></figure>
<h2 id="8-lamda表达式"><a href="#8-lamda表达式" class="headerlink" title="8.lamda表达式"></a>8.lamda表达式</h2><ol>
<li><p>C++ 11 中的 Lambda 表达式用于定义并创建匿名的函数对象，用来简化编程工作。</p>
</li>
<li><p>Lambda 的语法形式：</p>
</li>
<li><p>[捕获列表] (参数列表) -&gt; 返回值类型 { 函数体 };</p>
</li>
</ol>
<p>o [捕获列表]：这部分是捕获区，用于捕获外部变量，标识一个 Lambda 表达式的开始，不能省略</p>
<p> 捕获列表为空：不捕获外部变量</p>
<p> =：表示值传入</p>
<p> &amp;：表示引用传入</p>
<p>示例：</p>
<p>[a]：将 a 按值进行传递</p>
<p>[&amp;a]：将 a 按引用进行传递。</p>
<p>[a,&amp;b]：将 a 按值传递，b 按引用进行传递。</p>
<p>[=,&amp;a,&amp;b]：除 a 和 b 按引用进行传递外，其它参数都按值进行传递。</p>
<p>[&amp;,a,b]：除 a 和 b 按值进行传递外，其它参数都按引用进行传递。</p>
<p>o (参数列表)：同函数参数列表</p>
<p>o -&gt; 返回值类型：这部分如果返回值为 void，可以省略</p>
<p>o { 函数体 }：同函数的函数体</p>
<h2 id="9-内联函数"><a href="#9-内联函数" class="headerlink" title="9.内联函数"></a>9.内联函数</h2><p>内联函数（inline），通常就是在每个调用点上“内联地”展开，内联函数的使用可以有效避免函数调用的开销。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> string &amp; <span class="title">shorterString</span><span class="params">(<span class="keyword">const</span> string &amp; s1,<span class="keyword">const</span> string &amp; s2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s1.<span class="built_in">size</span>()&lt;s2.<span class="built_in">size</span>()?s1:s2;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内联机制用于优化<strong>规模较小、流程直接、频繁调用</strong>的函数。</p>
<p>大多数编译器不支持<strong>内联递归函数</strong>。</p>
<h2 id="10-constexpr函数"><a href="#10-constexpr函数" class="headerlink" title="10.constexpr函数"></a>10.constexpr函数</h2><p>constexpr函数是指能用于常量表达式的函数，需要遵循以下几点原则；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constexpr int new_sz()  &#123;return 42;&#125;</span><br><span class="line">constexpr int foo = new_sz;</span><br></pre></td></tr></table></figure>
<ol>
<li>函数返回值与形参类型必须是字面值类型</li>
<li>函数体中有且只有一条return语句</li>
<li>函数中也可由其他语句（空语句、类型别名、using声明），只要这些语句在运行时不执行其他操作。</li>
</ol>
<p>执行constexpr函数时，编译器会把函数调用替换为其结果值;为了能在编译过程随时展开，constexpr函数会被隐式的指定为内联函数。</p>
<p>允许constexpr函数的返回值并非一个常量：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果arg是常量表达式，则scale(arg)也是常量表达式</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> <span class="title">scale</span><span class="params">(<span class="keyword">size_t</span> cnt)</span> </span>&#123; <span class="keyword">return</span> new_sz*cnt;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="built_in">scale</span>(<span class="number">2</span>)]; <span class="comment">//正确，scale(2)是常量表达式</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> a2[<span class="built_in">scale</span>(<span class="number">2</span>)]; <span class="comment">//此处编译器报错，因为scale(2)不是常量表达式；而此处上下文需要scale返回一个常量表达式</span></span><br></pre></td></tr></table></figure>
<p>如果cnt是常量表达式，则返回值也是常量表达式；反之不然。</p>
<p>tips：通常把内联函数和constexpr函数放在头文件内（因为对于某个给定的内联函数或constexpr函数来说，可以在程序中多次定义，但它的多个定义必须完全一致）</p>
<ul>
<li>​    </li>
</ul>
<h1 id="B-内存"><a href="#B-内存" class="headerlink" title="B.内存"></a>B.内存</h1><h2 id="1-C-内存"><a href="#1-C-内存" class="headerlink" title="1.C++内存"></a>1.C++内存</h2><p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/798C7A2D023204559B62F88B54E35CBB.png" alt="img"></p>
<p><strong>一个程序有哪些section：</strong></p>
<p>如上图，<strong>从低地址到高地址，一个程序由代码段、数据段、BSS段、堆、共享区、栈等</strong>组成。</p>
<ol>
<li><strong>数据段：</strong>存放程序中已初始化的全局变量和静态变量的一块内存区域。</li>
<li><strong>代码段：</strong>存放程序执行代码的一块内存区域。只读，代码段的头部还会包含一些只读的常数变量。</li>
<li><strong>BSS</strong> 段：存放程序中未初始化的全局变量和静态变量的一块内存区域。</li>
</ol>
<p>存放未初始化或者初始化为0的全局变量和静态变量的一块内存区域，特点是可读写的。在程序执行前BSS段会自动清0。</p>
<ol>
<li><p>可执行程序在运行时又会多出两个区域：堆区和栈区。</p>
<p><strong>堆区：</strong>动态申请内存用。堆从低地址向高地址增长。</p>
<p><strong>栈区：</strong>存储局部变量、函数参数值。栈从高地址向低地址增长。是一块连续的空间。</p>
</li>
<li><p>最后还有一个<strong>共享区</strong>，位于堆和栈之间。</p>
</li>
</ol>
<p><strong>程序启动的过程：</strong></p>
<ol>
<li>操作系统首先创建相应的进程并分配私有的进程空间，然后操作系统的加载器负责把可执行文件的数据段和代码段映射到进程的虚拟内存空间中。</li>
<li>加载器读入可执行程序的导入符号表，根据这些符号表可以查找出该可执行程序的所有依赖的动态链接库。</li>
<li>加载器针对该程序的每一个动态链接库调用LoadLibrary （1）查找对应的动态库文件，加载器为该动态链接库确定一个合适的基地址。 （2）加载器读取该动态链接库的导入符号表和导出符号表，比较应用程序要求的导入符号是否匹配该库的导出符号。 （3）针对该库的导入符号表，查找对应的依赖的动态链接库，如有跳转，则跳到3 （4）调用该动态链接库的初始化函数</li>
<li>初始化应用程序的全局变量，对于全局对象自动调用构造函数。</li>
<li>进入应用程序入口点函数开始执行。</li>
</ol>
<p><strong>怎么判断数据分配在栈上还是堆上：</strong>首先局部变量分配在栈上；而通过malloc和new申请的空间是在堆上。</p>
<h1 id="C-面向对象"><a href="#C-面向对象" class="headerlink" title="C.面向对象"></a>C.面向对象</h1><h2 id="1-多态"><a href="#1-多态" class="headerlink" title="1.多态"></a>1.多态</h2><p>使用基类的指针指向子类的对象，使用父类的指针调用子类的成员函数，实现多态。</p>
<p>包含重载、重写。</p>
<ol>
<li>多态是面向对象的重要特性之一，它是一种行为的封装，就是不同对象对同一行为会有不同的状态。(举例 : 学生和成人都去买票时,学生会打折,成人不会)</li>
<li>多态是以封装和继承为基础的。在C++中多态分为静态多态（早绑定）和动态多态（晚绑定）两种，其中动态多态是通过虚函数实现，静态多态通过函数重载实现。</li>
</ol>
<h2 id="2-虚函数"><a href="#2-虚函数" class="headerlink" title="2.虚函数"></a>2.虚函数</h2><p>在基类的函数前加上virtual关键字，在派生类中重写该函数，运行时将会根据对象的实际类型来调用相应的函数。如果对象类型是派生类，就调用派生类的函数；如果对象类型是基类，就调用基类的函数。</p>
<ol>
<li>用virtual关键字申明的函数叫做虚函数，虚函数肯定是类的成员函数。</li>
<li>存在虚函数的类都有一个一维的虚函数表叫做虚表，类的对象有一个指向虚表开始的虚指针。虚表是和类对应的，虚表指针是和对象对应的。</li>
<li>多态性是一个接口多种实现，是面向对象的核心，分为类的多态性和函数的多态性。</li>
<li>重写用虚函数来实现，结合动态绑定。</li>
<li>纯虚函数是虚函数再加上 = 0。</li>
<li>抽象类是指包括至少一个纯虚函数的类。</li>
</ol>
<p>纯虚函数：virtual void fun()=0。即抽象类必须在子类实现这个函数，即先有名称，没有内容，在派生类实现内容。</p>
<h2 id="3-虚函数与纯虚函数的区别"><a href="#3-虚函数与纯虚函数的区别" class="headerlink" title="3.虚函数与纯虚函数的区别"></a>3.虚函数与纯虚函数的区别</h2><ol>
<li><p>只有虚函数的类不叫抽象类，但含有纯虚函数的类称为抽象类。</p>
</li>
<li><p>虚函数可以直接使用，被子类重写后可以以多态的形式调用；但纯虚函数不可以直接使用，因为其只有声明而没有定义。</p>
</li>
<li><p>虚函数和纯虚函数都可以在子类被重写，以多态的形式调用。</p>
</li>
<li><p>虚函数和纯虚函数通常存在于抽象基类中，被子类进行重写，目的是提供一个统一的接口。</p>
</li>
<li><p>虚函数定义 virtual{};纯虚函数定义virtual{}=0。</p>
<p>虚函数和纯虚函数不能有static修饰符，因为被static修饰的函数在编译前要求前期绑定，但虚函数是动态绑定。</p>
</li>
</ol>
<p>含有纯虚函数的类是抽象类，它不能生成对象，用户不能创建类的实例，只能创建其派生类的实例。</p>
<h2 id="4-c-中的构造函数"><a href="#4-c-中的构造函数" class="headerlink" title="4.c++中的构造函数"></a>4.c++中的构造函数</h2><p>默认构造函数</p>
<p>初始化构造函数</p>
<p>拷贝构造函数 复制构造函数默认的是浅拷贝</p>
<p>移动构造函数 将其他类型的变量隐式转为本类的对象</p>
<p>如果一个类定义了自己的析构函数，那么它要定义自己的拷贝构造函数和默认构造函数</p>
<h2 id="5-简述一下c-中的静态多态与动态多态"><a href="#5-简述一下c-中的静态多态与动态多态" class="headerlink" title="5.简述一下c++中的静态多态与动态多态"></a>5.简述一下c++中的静态多态与动态多态</h2><ul>
<li>静态多态在编译期间完成，编译器根据实参类型选择相应的重载函数。如果找到重载函数则执行，找不到则编译时报错。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">include&lt;iostream&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="comment">//1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Add</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span><span class="comment">//2</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">Add</span>(<span class="number">666</span>,<span class="number">888</span>)&lt;&lt;endl;<span class="comment">//1</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">Add</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>);<span class="comment">//2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>动态多态</li>
</ul>
<p>通过基类的指针指向子类对象实现多态。</p>
<p>动态绑定2条件：</p>
<ol>
<li>虚函数，基类中必须有虚函数，在派生类中必须重写虚函数。</li>
<li>通过基类类型的指针引用来调用虚函数。</li>
</ol>
<h2 id="6-说说为什么要虚析构，为什么不能虚构造"><a href="#6-说说为什么要虚析构，为什么不能虚构造" class="headerlink" title="6.说说为什么要虚析构，为什么不能虚构造"></a>6.说说为什么要虚析构，为什么不能虚构造</h2><ol>
<li><p>虚析构：将可能会被继承的父类的析构函数设置为虚函数，可以保证当我们new一个子类，然后使用基类指针指向该子类对象，释放基类指针时可以释放掉子类的空间，防止内存泄漏。如果基类的析构函数不是虚函数，在特定情况下会导致派生来无法被析构。</p>
<ol>
<li>用派生类类型指针绑定派生类实例，析构的时候，不管基类析构函数是不是虚函数，都会正常析构</li>
<li>用基类类型指针绑定派生类实例，析构的时候，如果基类析构函数不是虚函数，则只会析构基类，不会析构派生类对象，从而造成内存泄漏。为什么会出现这种现象呢，个人认为析构的时候如果没有虚函数的动态绑定功能，就只根据指针的类型来进行的，而不是根据指针绑定的对象来进行，所以只是调用了基类的析构函数；如果基类的析构函数是虚函数，则析构的时候就要根据指针绑定的对象来调用对应的析构函数了。</li>
</ol>
<p>C++默认的析构函数不是虚函数是因为虚函数需要额外的虚函数表和虚表指针，占用额外的内存。而对于不会被继承的类来说，其析构函数如果是虚函数，就会浪费内存。因此C++默认的析构函数不是虚函数，而是只有当需要当作父类时，设置为虚函数。</p>
<p>（简单来说，虚析构函数可以使基类指针析构子类的对象，实现多态的特性）</p>
</li>
<li><p>不能虚构造：</p>
<ol>
<li>从存储空间角度：虚函数对应一个vtale,这个表的地址是存储在对象的内存空间的。如果将构造函数设置为虚函数，就需要到vtable 中调用，可是对象还没有实例化，没有内存空间分配，如何调用。（悖论）</li>
<li>从使用角度：虚函数主要用于在信息不全的情况下，能使重载的函数得到对应的调用。构造函数本身就是要初始化实例，那使用虚函数也没有实际意义呀。所以构造函数没有必要是虚函数。虚函数的作用在于通过父类的指针或者引用来调用它的时候能够变成调用子类的那个成员函数。而构造函数是在创建对象时自动调用的，不可能通过父类的指针或者引用去调用，因此也就规定构造函数不能是虚函数。</li>
<li>从实现上看，vbtl 在构造函数调用后才建立，因而构造函数不可能成为虚函数。从实际含义上看，在调用构造函数时还不能确定对象的真实类型（因为子类会调父类的构造函数）；而且构造函数的作用是提供初始化，在对象生命期只执行一次，不是对象的动态行为，也没有太大的必要成为虚函数。</li>
</ol>
</li>
</ol>
<h2 id="7-定义析构函数会自动生成哪些函数"><a href="#7-定义析构函数会自动生成哪些函数" class="headerlink" title="7.定义析构函数会自动生成哪些函数"></a>7.定义析构函数会自动生成哪些函数</h2><p>只定义析构函数，编译器会自动生成拷贝构造函数和默认构造函数。</p>
<p>拷贝构造函数默认使用浅拷贝。</p>
<h2 id="8-一个类会默认生成哪些函数"><a href="#8-一个类会默认生成哪些函数" class="headerlink" title="8.一个类会默认生成哪些函数"></a>8.一个类会默认生成哪些函数</h2><p>定义一个空类，会默认生成以下函数：</p>
<p>1.无参构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Empty</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.拷贝构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Empty</span>(<span class="keyword">const</span> Empty&amp; copy)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.赋值运算符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Empty&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Empty&amp; copy)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.析构函数（非虚）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~<span class="built_in">Empty</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-说说c-类对象的初始化顺序"><a href="#9-说说c-类对象的初始化顺序" class="headerlink" title="9.说说c++类对象的初始化顺序"></a>9.说说c++类对象的初始化顺序</h2><p>父类构造函数–&gt;成员类对象构造函数–&gt;自身构造函数</p>
<p>其中成员变量的初始化与声明顺序有关，构造函数的调用顺序是类派生列表中的顺序。</p>
<p>析构顺序和构造顺序相反。</p>
<h2 id="10-简述浅拷贝和深拷贝"><a href="#10-简述浅拷贝和深拷贝" class="headerlink" title="10.简述浅拷贝和深拷贝"></a>10.简述浅拷贝和深拷贝</h2><ol>
<li>浅拷贝：又称值拷贝，将源对象的值拷贝到目标对象中去，本质上来说源对象和目标对象共用一份实体，只是所引用的变量名不同，地址其实还是相同的。</li>
<li>深拷贝，拷贝的时候先开辟出和源对象大小一样的空间，然后将源对象里的内容拷贝到目标对象中去，这样两个指针就指向了不同的内存位置。并且里面的内容是一样的，这样不但达到了我们想要的目的，还不会出现问题，两个指针先后去调用析构函数，分别释放自己所指向的位置。即为每次增加一个指针，便申请一块新的内存，并让这个指针指向新的内存，深拷贝情况下，不会出现重复释放同一块内存的错误。</li>
<li>深拷贝的实现：深拷贝的拷贝构造函数和赋值运算符的重载传统实现：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">STRING</span>( <span class="keyword">const</span> STRING&amp; s )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//_str = s._str;</span></span><br><span class="line">    _str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(s._str) + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy_s</span>( _str, <span class="built_in">strlen</span>(s._str) + <span class="number">1</span>, s._str );</span><br><span class="line">&#125;</span><br><span class="line">STRING&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> STRING&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//this-&gt;_str = s._str;</span></span><br><span class="line">        <span class="keyword">delete</span>[] _str;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(s._str) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy_s</span>(<span class="keyword">this</span>-&gt;_str, <span class="built_in">strlen</span>(s._str) + <span class="number">1</span>, s._str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的拷贝构造函数我们很容易理解，先开辟出和源对象一样大的内存区域，然后将需要拷贝的数据复制到目标拷贝对象 ， 那么这里的赋值运算符的重载是怎么样做的呢？</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220515104206498.png" alt="image-20220515104206498"></p>
<p>这种方法解决了我们的指针悬挂问题，通过不断的开空间让不同的指针指向不同的内存，以防止同一块内存被释放两次的问题。</p>
<h2 id="11-请你回答一下-C-类内可以定义引用数据成员吗？"><a href="#11-请你回答一下-C-类内可以定义引用数据成员吗？" class="headerlink" title="11.请你回答一下 C++ 类内可以定义引用数据成员吗？"></a>11.请你回答一下 C++ 类内可以定义引用数据成员吗？</h2><p>c++类内可以定义引用成员变量，但要遵循以下三个规则：</p>
<ol>
<li>不能用默认构造函数初始化，必须提供构造函数来初始化引用成员变量。否则会造成引用未初始化错误。</li>
<li>构造函数的形参也必须是引用类型。</li>
<li>不能在构造函数里初始化，必须在初始化列表中进行初始化。</li>
</ol>
<h2 id="12-简述一下什么是常函数，有什么作用"><a href="#12-简述一下什么是常函数，有什么作用" class="headerlink" title="12.简述一下什么是常函数，有什么作用"></a>12.简述一下什么是常函数，有什么作用</h2><p>类的成员函数后面加 const，表明这个函数不会对这个类对象的数据成员（准确地说是非静态数据成员）作任何改变。</p>
<p>在设计类的时候，一个原则就是对于不改变数据成员的成员函数都要在后面加const，而对于改变数据成员的成员函数不能加 const。所以 const 关键字对成员函数的行为作了更明确的限定：有 const 修饰的成员函数（指 const 放在函数参数表的后面，而不是在函数前面或者参数表内），只能读取数据成员，不能改变数据成员；没有 const 修饰的成员函数，对数据成员则是可读可写的。</p>
<p>除此之外，在类的成员函数后面加 const 还有什么好处呢？那就是常量（即 const）对象可以调用 const 成员函数，而不能调用非const修饰的函数。正如非const类型的数据可以给const类型的变量赋值一样，反之则不成立。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CStu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">CStu</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//a = 13; //常函数不能修改数据成员</span></span><br><span class="line">        cout &lt;&lt;a &lt;&lt; <span class="string">&quot;I am show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CStu st;</span><br><span class="line">    st.<span class="built_in">Show</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="13-说说什么是虚继承，解决什么问题，如何实现？"><a href="#13-说说什么是虚继承，解决什么问题，如何实现？" class="headerlink" title="13.说说什么是虚继承，解决什么问题，如何实现？"></a>13.说说什么是虚继承，解决什么问题，如何实现？</h2><p>虚继承是解决C++多重继承问题的一种手段，从不同途径继承来的同一基类，会在子类中存在多份拷贝。这将存在两个问题：其一，浪费存储空间；第二，存在二义性问题，通常可以将派生类对象的地址赋值给基类对象，实现的具体方式是，将基类指针指向继承类（继承类有基类的拷贝）中的基类对象的地址，但是多重继承可能存在一个基类的多份拷贝，这就出现了二义性。虚继承可以解决多种继承前面提到的两个问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> _a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> _b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> _c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span><span class="keyword">public</span> B, <span class="keyword">public</span> C</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> _d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//菱形继承和菱形虚继承的对象模型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.B::_a = <span class="number">1</span>;</span><br><span class="line">    d.C::_a = <span class="number">2</span>;</span><br><span class="line">    d._b = <span class="number">3</span>;</span><br><span class="line">    d._c = <span class="number">4</span>;</span><br><span class="line">    d._d = <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(D) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分别从菱形继承和虚继承来分析：</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/1DBA188A576ED176E295873CC580363A.png" alt="img"></p>
<p>菱形继承中A在B,C,D,中各有一份，虚继承中，A共享（虚继承使得菱形继承共享一个基类对象）。</p>
<p>上面的虚继承表实际上是一个指针数组。B、C实际上是虚基表指针，指向虚基表。</p>
<p>虚基表：存放相对偏移量，用来找虚基类</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%BB%98%E5%9B%BE.png" alt="未命名绘图"></p>
<h2 id="14-说说纯虚函数能实例化吗，为什么？派生类要实现吗，为什么？"><a href="#14-说说纯虚函数能实例化吗，为什么？派生类要实现吗，为什么？" class="headerlink" title="14.说说纯虚函数能实例化吗，为什么？派生类要实现吗，为什么？"></a>14.说说纯虚函数能实例化吗，为什么？派生类要实现吗，为什么？</h2><p><strong>参考回答</strong></p>
<ol>
<li><p>纯虚函数不可以实例化，但是可以用其派生类实例化，示例如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span> </span><br><span class="line">  <span class="keyword">public</span>:  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>; </span><br><span class="line"> &#125;; </span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span>     </span><br><span class="line">  <span class="keyword">public</span>:     </span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>; </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span><span class="keyword">public</span> Base &#123;</span><br><span class="line">  <span class="keyword">public</span>:     </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;哈哈&quot;</span> &lt;&lt; endl;     </span><br><span class="line">  &#125; </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">  Base *b = <span class="keyword">new</span> <span class="built_in">Derived</span>();     </span><br><span class="line">  b-&gt;<span class="built_in">func</span>();      </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>虚函数的原理采用 vtable。类中含有纯虚函数时，其vtable 不完全，有个空位。</p>
<p>即“纯虚函数在类的vftable表中对应的表项被赋值为0。也就是指向一个不存在的函数。由于编译器绝对不允许有调用一个不存在的函数的可能，所以该类不能生成对象。在它的派生类中，除非重写此函数，否则也不能生成对象。”</p>
<p>所以纯虚函数不能实例化。</p>
</li>
<li><p>纯虚函数是在基类中声明的虚函数，它要求任何派生类都要定义自己的实现方法，以实现多态性。</p>
</li>
<li><p>定义纯虚函数是为了实现一个接口，用来规范派生类的行为，也即规范继承这个类的程序员必须实现这个函数。派生类仅仅只是继承函数的接口。纯虚函数的意义在于，让所有的类对象（主要是派生类对象）都可以执行纯虚函数的动作，但基类无法为纯虚函数提供一个合理的缺省实现。所以类纯虚函数的声明就是在告诉子类的设计者，“你必须提供一个纯虚函数的实现，但我不知道你会怎样实现它”。</p>
</li>
</ol>
<h2 id="15-请问拷贝构造函数的参数是什么传递方式，为什么"><a href="#15-请问拷贝构造函数的参数是什么传递方式，为什么" class="headerlink" title="15.请问拷贝构造函数的参数是什么传递方式，为什么"></a>15.请问拷贝构造函数的参数是什么传递方式，为什么</h2><p><strong>参考回答</strong></p>
<ol>
<li><p>拷贝构造函数的参数必须使用引用传递</p>
</li>
<li><p>如果拷贝构造函数中的参数不是一个引用，即形如CClass(const CClass c_class)，那么就相当于采用了传值的方式(pass-by-value)，而传值的方式会调用该类的拷贝构造函数，从而造成无穷递归地调用拷贝构造函数。因此拷贝构造函数的参数必须是一个引用。</p>
<p>需要澄清的是，传指针其实也是传值，如果上面的拷贝构造函数写成CClass(const CClass* c_class)，也是不行的。事实上，只有传引用不是传值外，其他所有的传递方式都是传值。</p>
</li>
</ol>
<h2 id="16-如何理解抽象类？"><a href="#16-如何理解抽象类？" class="headerlink" title="16.如何理解抽象类？"></a>16.如何理解抽象类？</h2><p><strong>参考回答</strong></p>
<ol>
<li><p>抽象类的定义如下：</p>
<p>纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加“=0”，有纯虚函数的类就叫做抽象类。</p>
</li>
<li><p>抽象类有如下几个特点：</p>
<p>1）抽象类只能用作其他类的基类，不能建立抽象类对象。</p>
<p>2）抽象类不能用作参数类型、函数返回类型或显式转换的类型。</p>
<p>3）可以定义指向抽象类的指针和引用，此指针可以指向它的派生类，进而实现多态性。</p>
</li>
</ol>
<h2 id="17-说说什么是虚基类，可否被实例化？"><a href="#17-说说什么是虚基类，可否被实例化？" class="headerlink" title="17.说说什么是虚基类，可否被实例化？"></a>17.说说什么是虚基类，可否被实例化？</h2><p><strong>参考回答</strong></p>
<ol>
<li><p>在被继承的类前面加上virtual关键字，这时被继承的类称为虚基类，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span>:</span><span class="keyword">public</span> <span class="keyword">virtual</span> A;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span>:</span><span class="keyword">public</span> <span class="keyword">virtual</span> A;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span><span class="keyword">public</span> B1,<span class="keyword">public</span> B2;</span><br></pre></td></tr></table></figure>
</li>
<li><p>虚继承的类可以被实例化，举例如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> weight;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getWeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> weight;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tiger</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Liger lg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*既然我们已经在Tiger和Lion类的定义中声明了&quot;virtual&quot;关键字，lg对象中只会有一个animal对象。于是下面的代码编译OK */</span></span><br><span class="line">    <span class="keyword">int</span> weight = lg.<span class="built_in">getWeight</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="18-简述一下拷贝赋值和移动赋值？"><a href="#18-简述一下拷贝赋值和移动赋值？" class="headerlink" title="18.简述一下拷贝赋值和移动赋值？"></a>18.简述一下拷贝赋值和移动赋值？</h2><p>   <strong>参考回答</strong></p>
<ol>
<li><p>拷贝赋值是通过拷贝构造函数来赋值，在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象。</p>
</li>
<li><p>移动赋值是通过移动构造函数来赋值，二者的主要区别在于</p>
<p>1）拷贝构造函数的形参是一个左值引用，而移动构造函数的形参是一个右值引用；</p>
<p>2）拷贝构造函数完成的是整个对象或变量的拷贝，而移动构造函数是生成一个指针指向源对象或变量的地址，接管源对象的内存，相对于大量数据的拷贝节省时间和内存空间。</p>
</li>
</ol>
<h2 id="19-C-中哪些函数不能被声明为虚函数？"><a href="#19-C-中哪些函数不能被声明为虚函数？" class="headerlink" title="19.C++ 中哪些函数不能被声明为虚函数？"></a>19.C++ 中哪些函数不能被声明为虚函数？</h2><p><strong>参考回答</strong></p>
<p>常见的不不能声明为虚函数的有：普通函数（非成员函数），静态成员函数，内联成员函数，构造函数，友元函数。</p>
<ol>
<li><p>为什么C++不支持普通函数为虚函数？</p>
<p>普通函数（非成员函数）只能被overload，不能被override，声明为虚函数也没有什么意思，因此编译器会在编译时绑定函数。</p>
</li>
<li><p>为什么C++不支持构造函数为虚函数？</p>
<p>这个原因很简单，主要是从语义上考虑，所以不支持。因为构造函数本来就是为了明确初始化对象成员才产生的，然而virtual function主要是为了再不完全了解细节的情况下也能正确处理对象。另外，virtual函数是在不同类型的对象产生不同的动作，现在对象还没有产生，如何使用virtual函数来完成你想完成的动作。（这不就是典型的悖论）</p>
<p>构造函数用来创建一个新的对象,而虚函数的运行是建立在对象的基础上,在构造函数执行时,对象尚未形成,所以不能将构造函数定义为虚函数</p>
</li>
<li><p>为什么C++不支持内联成员函数为虚函数？</p>
<p>其实很简单，那内联函数就是为了在代码中直接展开，减少函数调用花费的代价，虚函数是为了在继承后对象能够准确的执行自己的动作，这是不可能统一的。（再说了，<em>inline函数在编译时被展开，虚函数在运行时才能动态的绑定函数</em>）</p>
<p>内联函数是在编译时期展开,而虚函数的特性是运行时才动态联编,所以两者矛盾,不能定义内联函数为虚函数</p>
</li>
<li><p>为什么C++不支持静态成员函数为虚函数？</p>
<p>这也很简单，静态成员函数对于每个类来说只有一份代码，所有的对象都共享这一份代码，他也没有要动态绑定的必要性。</p>
<p>静态成员函数属于一个类而非某一对象,没有this指针,它无法进行对象的判别</p>
</li>
<li><p>为什么C++不支持友元函数为虚函数？</p>
<p>因为C++不支持友元函数的继承，对于没有继承特性的函数没有虚函数的说法。</p>
</li>
</ol>
<h2 id="20-解释下-C-中类模板和模板类的区别"><a href="#20-解释下-C-中类模板和模板类的区别" class="headerlink" title="20.解释下 C++ 中类模板和模板类的区别"></a>20.解释下 C++ 中类模板和模板类的区别</h2><p><strong>参考回答</strong></p>
<ol>
<li>类模板是模板的定义，不是一个实实在在的类，定义中用到通用类型参数</li>
<li>模板类是实实在在的类定义，是类模板的实例化。类定义中参数被实际类型所代替。</li>
</ol>
<p><strong>答案解析</strong></p>
<ol>
<li>类模板的类型参数可以有一个或多个，每个类型前面都必须加class，如template <class T1,class T2>class someclass{…};在定义对象时分别代入实际的类型名，如  someclass<int,double> obj;</li>
<li>和使用类一样，使用类模板时要注意其作用域，只能在其有效作用域内用它定义对象。</li>
<li>模板可以有层次，一个类模板可以作为基类，派生出派生模板类。</li>
</ol>
<h2 id="21-虚函数表里存放的内容是什么时候写进去的？"><a href="#21-虚函数表里存放的内容是什么时候写进去的？" class="headerlink" title="21. 虚函数表里存放的内容是什么时候写进去的？"></a>21. 虚函数表里存放的内容是什么时候写进去的？</h2><p><strong>参考回答</strong></p>
<ol>
<li>虚函数表是一个存储虚函数地址的数组,以NULL结尾。虚表（vftable）在编译阶段生成，对象内存空间开辟以后，写入对象中的 vfptr，然后调用构造函数。即：虚表在构造函数之前写入</li>
<li>除了在构造函数之前写入之外，我们还需要考虑到虚表的二次写入机制，通过此机制让每个对象的虚表指针都能准确的指向到自己类的虚表，为实现动多态提供支持。</li>
</ol>
<h1 id="D-c-11新特性"><a href="#D-c-11新特性" class="headerlink" title="D. c++11新特性"></a>D. c++11新特性</h1><h2 id="1-说说-C-11-的新特性有哪些"><a href="#1-说说-C-11-的新特性有哪些" class="headerlink" title="1.说说 C++11 的新特性有哪些"></a>1.说说 C++11 的新特性有哪些</h2><p>  C++新特性主要包括包含语法改进和标准库扩充两个方面，主要包括以下11点：</p>
<ol>
<li><p>语法的改进</p>
<p>（1）统一的初始化方法</p>
<p>（2）成员变量默认初始化</p>
<p>（3）auto关键字  用于定义变量，编译器可以自动判断的类型（前提：定义一个变量时对其进行初始化）</p>
<p>（4）decltype  求表达式的类型</p>
<p>（5）智能指针 shared_ptr</p>
<p>（6）空指针 nullptr（原来NULL）</p>
<p>（7）基于范围的for循环</p>
<p>（8）右值引用和move语义  让程序员有意识减少进行深拷贝操作</p>
</li>
<li><p>标准库扩充（往STL里新加进一些模板类，比较好用）</p>
<p>（9）无序容器（哈希表）  用法和功能同map一模一样，区别在于哈希表的效率更高</p>
<p>（10）正则表达式  可以认为正则表达式实质上是一个字符串，该字符串描述了一种特定模式的字符串</p>
<p>（11）Lambda表达式</p>
</li>
</ol>
<h2 id="2-智能指针"><a href="#2-智能指针" class="headerlink" title="2.智能指针"></a>2.智能指针</h2><p>C++ 提供了四个智能指针模板类, 分别是: <code>auto_ptr</code>, <code>unique_ptr</code>, <code>shared_ptr</code>和<code>weak_ptr</code>. (<code>auto_ptr</code>是 C++98 提供的解决方案, C++11 已经将其摒弃, 并提供了另外三种解决方案). 这三个智能指针模板都定义了类似指针的对象, 可以将<code>new</code>获得(直接或间接)的地址赋给这种对象. <strong>当智能指针过期时, 其析构函数将使用<code>delete</code>来释放内存.</strong> (要创建智能指针对象, 需要包含头文件<code>&lt;memory&gt;</code>)</p>
<h3 id="1-三种智能指针的区别"><a href="#1-三种智能指针的区别" class="headerlink" title="1.三种智能指针的区别?"></a>1.三种智能指针的区别?</h3><ul>
<li>auto_ptr: 当进行赋值时, 会将旧指针的所有权转让, 使得 <strong>对于特定的对象, 只能有一个智能指针可以拥有它</strong>.（c++11已摒弃）</li>
<li>unique_ptr: 当进行赋值时, 会将旧指针的所有权转让, 使得 <strong>对于特定的对象, 只能有一个智能指针可以拥有它</strong>. unique_ptr 相比于 auto_ptr 会执行更加严格的所有权转让策略</li>
<li>shared_ptr: 通过引用计数(reference counting), 跟踪引用特定特定对象的智能指针数. 当发生赋值操作时, 计数增1, 当指针过期时, 计数减1. 仅当最后一个指针过期时, 才调用 delete.</li>
<li>weak_ptr: 不控制对象声明周期的智能指针, 它指向一个 shared_ptr 管理的对象, 而进行内存管理的只有 shared_ptr. weak_ptr 主要用来帮助解决循环引用问题, 它的构造和析构不会引起引用计数的增加或者减少. weak_ptr 一般都是配合 shared_ptr 使用, 通常不会单独使用.</li>
</ul>
<h3 id="2-unique-ptr-和-auto-ptr-的区别"><a href="#2-unique-ptr-和-auto-ptr-的区别" class="headerlink" title="2.unique_ptr 和 auto_ptr 的区别?"></a>2.unique_ptr 和 auto_ptr 的区别?</h3><ul>
<li><p>所有权转让机制不同: auto_ptr 允许通过直接赋值进行转让, 但是这样会留下危险的 <strong>悬挂指针</strong>, 容易使得程序在运行阶段崩溃. unique_ptr 仅仅允许将临时右值进行赋值, 否则会在编译阶段发生错误, 这样更加安全(编译阶段错误比潜在的程序崩溃更安全).</p>
</li>
<li><p>相比于 auto_ptr 和 share_ptr, unique_ptr 可以使用<code>new[]</code>分配的内存作为参数: </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;<span class="keyword">double</span>[]&gt; <span class="title">pda</span><span class="params">(<span class="keyword">new</span> <span class="keyword">double</span>(<span class="number">5</span>))</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-如何选择合适的智能指针"><a href="#3-如何选择合适的智能指针" class="headerlink" title="3.如何选择合适的智能指针?"></a>3.如何选择合适的智能指针?</h3><p>如果程序要使用多个指向同一个对象的指针, 应选择<code>shared_ptr</code>, 这样的情况包括:</p>
<ul>
<li>对于智能指针数组, 用辅助指针来标识最大值或最小值的情况</li>
<li>很多 STL 算法都支持复制和赋值操作, 这些操作可用于 <code>shared_ptr</code>, 但不能用于 <code>unique_ptr</code> 和 <code>auto_ptr</code>.</li>
</ul>
<p>如果程序不需要多个指向同一个对象的指针, 则可以使用<code>unique_ptr</code>, 如果函数使用<code>new</code>分配内存, 并返回指向该内存的指针, 将其返回类型声明为<code>unique_ptr</code>是不错的选择, 这样, 所有权将转让给接受返回值的<code>unique_ptr</code>.</p>
<h2 id="3-无序容器（哈希表）"><a href="#3-无序容器（哈希表）" class="headerlink" title="3.无序容器（哈希表）"></a>3.无序容器（哈希表）</h2><p>无序容器（哈希表）  </p>
<p>用法和功能同map一模一样，区别在于哈希表的效率更高。</p>
<p>(1) 无序容器具有以下 2 个特点：</p>
<p>  a. 无序容器内部存储的键值对是无序的，各键值对的存储位置取决于该键值对中的键，</p>
<p>  b. 和关联式容器相比，无序容器擅长通过指定键查找对应的值（平均时间复杂度为 O(1)）；但对于使用迭代器遍历容器中存储的元素，无序容器的执行效率则不如关联式容器。</p>
<p>(2) 和关联式容器一样，无序容器只是一类容器的统称，其包含有 4 个具体容器，分别为 unordered_map、unordered_multimap、unordered_set 以及 unordered_multiset。功能如下表：</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/%E6%88%AA%E5%B1%8F2022-05-22%2016.29.46.png" alt="截屏2022-05-22 16.29.46"></p>
<h2 id="3-正则表达式"><a href="#3-正则表达式" class="headerlink" title="3.正则表达式"></a>3.正则表达式</h2><p>可以认为正则表达式实质上是一个字符串，该字符串描述了一种特定模式的字符串。常用符号的意义如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>^</td>
<td>匹配行的开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配行的结尾</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意单个字符</td>
</tr>
<tr>
<td>[…]</td>
<td>匹配[]中的任意一个字符</td>
</tr>
<tr>
<td>(…)</td>
<td>设定分组</td>
</tr>
<tr>
<td>\</td>
<td>转义字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>\d 取反</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母[a-z]，数字，下划线</td>
</tr>
<tr>
<td>\W</td>
<td>\w 取反</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空格</td>
</tr>
<tr>
<td>\S</td>
<td>\s 取反</td>
</tr>
<tr>
<td>+</td>
<td>前面的元素重复1次或多次</td>
</tr>
<tr>
<td>*</td>
<td>前面的元素重复任意次</td>
</tr>
<tr>
<td>?</td>
<td>前面的元素重复0次或1次</td>
</tr>
<tr>
<td>{n}</td>
<td>前面的元素重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>前面的元素重复至少n次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>前面的元素重复至少n次，至多m次</td>
</tr>
<tr>
<td>\</td>
<td></td>
<td>逻辑或</td>
</tr>
</tbody>
</table>
</div>
<h2 id="5-Lambda匿名函数"><a href="#5-Lambda匿名函数" class="headerlink" title="5.Lambda匿名函数"></a>5.Lambda匿名函数</h2><p>所谓匿名函数，简单地理解就是没有名称的函数，又常被称为 lambda 函数或者 lambda 表达式。</p>
<h3 id="（1）定义"><a href="#（1）定义" class="headerlink" title="（1）定义"></a>（1）定义</h3><p>  lambda 匿名函数很简单，可以套用如下的语法格式：</p>
<p>​    [外部变量访问方式说明符] (参数) mutable noexcept/throw() -&gt; 返回值类型     {      函数体;     };</p>
<p>其中各部分的含义分别为：</p>
<p>a. [外部变量方位方式说明符]   [ ] 方括号用于向编译器表明当前是一个 lambda 表达式，其不能被省略。在方括号内部，可以注明当前 lambda 函数的函数体中可以使用哪些“外部变量”。</p>
<p>  所谓外部变量，指的是和当前 lambda 表达式位于同一作用域内的所有局部变量。</p>
<p>b. (参数)   和普通函数的定义一样，lambda 匿名函数也可以接收外部传递的多个参数。和普通函数不同的是，如果不需要传递参数，可以连同 () 小括号一起省略；</p>
<p>c. mutable   此关键字可以省略，如果使用则之前的 () 小括号将不能省略（参数个数可以为 0）。默认情况下，对于以值传递方式引入的外部变量，不允许在 lambda 表达式内部修改它们的值（可以理解为这部分变量都是 const 常量）。而如果想修改它们，就必须使用 mutable 关键字。</p>
<p>  <strong>注意:</strong>对于以值传递方式引入的外部变量，lambda 表达式修改的是拷贝的那一份，并不会修改真正的外部变量；</p>
<p>d. noexcept/throw()   可以省略，如果使用，在之前的 () 小括号将不能省略（参数个数可以为 0）。默认情况下，lambda 函数的函数体中可以抛出任何类型的异常。而标注 noexcept 关键字，则表示函数体内不会抛出任何异常；使用 throw() 可以指定 lambda 函数内部可以抛出的异常类型。</p>
<p>e. -&gt; 返回值类型   指明 lambda 匿名函数的返回值类型。值得一提的是，如果 lambda 函数体内只有一个 return 语句，或者该函数返回 void，则编译器可以自行推断出返回值类型，此情况下可以直接省略”-&gt; 返回值类型”。</p>
<p>f. 函数体   和普通函数一样，lambda 匿名函数包含的内部代码都放置在函数体中。该函数体内除了可以使用指定传递进来的参数之外，还可以使用指定的外部变量以及全局范围内的所有全局变量。</p>
<h3 id="（2）程序实例"><a href="#（2）程序实例" class="headerlink" title="（2）程序实例"></a>（2）程序实例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">4</span>] = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">//对 a 数组中的元素进行排序</span></span><br><span class="line">    <span class="built_in">sort</span>(num, num+<span class="number">4</span>, [=](<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; <span class="keyword">bool</span>&#123; <span class="keyword">return</span> x &lt; y; &#125; );</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : num)&#123;</span><br><span class="line">        cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*    程序运行结果：</span></span><br><span class="line"><span class="comment">          1 2 3 4</span></span><br><span class="line"><span class="comment">*/</span>            </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习笔记2</title>
    <url>/2022/03/03/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="Java学习笔记2"><a href="#Java学习笔记2" class="headerlink" title="Java学习笔记2"></a>Java学习笔记2</h1><span id="more"></span>
<h2 id="Java学习笔记"><a href="#Java学习笔记" class="headerlink" title="Java学习笔记"></a>Java学习笔记</h2><h3 id="1-可变参数"><a href="#1-可变参数" class="headerlink" title="1.可变参数"></a>1.可变参数</h3><p> 在方法声明中，在指定参数类型后加一个省略号。</p>
<p> 一个方法只能指定一个可变参数，它必须是方法的最后一个参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fisher.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">        demo1 d = <span class="keyword">new</span> demo1();</span><br><span class="line">        d.test(<span class="number">32</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>... numbers)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;the number &quot;</span>+i+<span class="string">&quot; is &quot;</span>+numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-递归结构2部分"><a href="#2-递归结构2部分" class="headerlink" title="2.递归结构2部分"></a>2.递归结构2部分</h3><ul>
<li>递归头：什么时候不调用自身方法 终止条件</li>
<li>地柜体： 什么时候需要调用自身方法</li>
</ul>
<h3 id="3-java内存浅析"><a href="#3-java内存浅析" class="headerlink" title="3.java内存浅析"></a>3.java内存浅析</h3><p>Java内存主要由以下三部分组成</p>
<ol>
<li><p>堆 </p>
<ol>
<li>存放new的对象和数组。</li>
<li>可以被所有的线程共享，不会存放别的对象引用</li>
</ol>
</li>
<li><p>栈</p>
<ol>
<li>存放基本变量类型，包含这个基本类型的具体数值</li>
<li>引用对象的变量（会存放这个引用在堆里的具体地址）</li>
</ol>
</li>
<li><p>方法区</p>
<ol>
<li>可以被所有的线程共享</li>
<li>包含了所有的class和static变量</li>
</ol>
</li>
</ol>
<p>声明数组时在栈里创建一个变量 存储的是对象的地址，相当于一个指针（声明）</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220225114445278.png" alt="image-20220225114445278" style="zoom: 50%;" /></p>
<p>创建数组时用引用指向堆中的变量（初始化）</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220225114853450.png" alt="image-20220225114853450"  /></p>
<h3 id="4-数组的三种初始化方法"><a href="#4-数组的三种初始化方法" class="headerlink" title="4.数组的三种初始化方法"></a>4.数组的三种初始化方法</h3><ul>
<li><p>静态初始化</p>
<p>定义后不可改变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> Man(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> Man(<span class="number">2</span>,<span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态初始化 动态初始化的过程包含默认初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组的默认初始化</p>
<p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素按照实例变量同样的方式被隐式初始化。</p>
</li>
</ul>
<h3 id="5-数组的工具类"><a href="#5-数组的工具类" class="headerlink" title="5.数组的工具类"></a>5.数组的工具类</h3><p>数组本身没有方法供大家使用，只有一个array.length可以查看长度。</p>
<p>Java提供一个数组工具类 java.utils.Arrays </p>
<p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，不需要使用对象进行调用。</p>
<p>常用方法：fill()   sort()   equals()  binarySearch()</p>
<h3 id="6-稀疏数组"><a href="#6-稀疏数组" class="headerlink" title="6.稀疏数组"></a>6.稀疏数组</h3><p>把具有不同值的元素和行列及值存储在一个小规模数组中，从而缩小程序的规模。</p>
<p>自己构造一个 sum+1行，3列的数组。</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227165548591.png" alt="image-20220227165548591"></p>
<h3 id="7-类"><a href="#7-类" class="headerlink" title="7.类"></a>7.类</h3><p>一个项目应该只有一个main方法。</p>
<h3 id="8-new关键字"><a href="#8-new关键字" class="headerlink" title="8.new关键字"></a>8.new关键字</h3><p>使用new关键字创建的时候，除了分配内存空间以外，还会给创建好的对象进行默认的初始化以及类内构造器的调用。</p>
<p>构造器有以下两个特点：</p>
<ul>
<li><p>必须和类的名字相同</p>
</li>
<li><p>必须没有返回类型，也不能写void</p>
</li>
<li><p>一旦定义有参构造，必须显示定义无参构造</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220301211903343.png" alt="image-20220301211903343"></p>
</li>
</ul>
<h3 id="9-引用"><a href="#9-引用" class="headerlink" title="9.引用"></a>9.引用</h3><p>除了八个基本类型以外的变量类型都为引用类型。</p>
<p>对象通过引用来操作： 栈 ——》堆</p>
<h3 id="10-面向对象三大概念——封装"><a href="#10-面向对象三大概念——封装" class="headerlink" title="10.面向对象三大概念——封装"></a>10.面向对象三大概念——封装</h3><ul>
<li><p>封装 大多时候针对属性而言</p>
<p>封装意义：</p>
<ol>
<li>提高程序安全性，保护yins</li>
<li>隐藏代码实现细节</li>
<li>统一接口</li>
<li>系统可维护性增加</li>
</ol>
<ul>
<li><p>该露的露，该藏的藏</p>
<ul>
<li>设计要求 高内聚、低耦合<ul>
<li>高内聚 类的内部数据操作细节自己完成，不允许外部干涉</li>
<li>低耦合 仅暴露少量的方法给外部使用</li>
</ul>
</li>
</ul>
</li>
<li><p>数据的隐藏</p>
<p>通常 应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</p>
</li>
<li><p>属性私有，get/set</p>
</li>
</ul>
</li>
</ul>
<h3 id="11-面向对象三大概念——继承"><a href="#11-面向对象三大概念——继承" class="headerlink" title="11.面向对象三大概念——继承"></a>11.面向对象三大概念——继承</h3><ul>
<li>继承的本质 是对某一批类的抽象，从而实现对现实世界更好的建模。</li>
<li>extands的含义是扩展，子类是父类的一种扩展</li>
<li><p>Java中的类只有单继承，没有多继承</p>
</li>
<li><p>Java中所有的类都默认直接或者间接继承Object类</p>
</li>
<li>子类和父类的关系为 子类is a 父类</li>
</ul>
<p>idea查看继承关系快捷键 control+H</p>
<ul>
<li>私有的属性、方法无法被继承</li>
</ul>
<h3 id="12-super注意点"><a href="#12-super注意点" class="headerlink" title="12.super注意点"></a>12.super注意点</h3><ol>
<li>super（）调用父类的构造方法，必须在构造方法的第一行</li>
<li>super必须只能出现在子类的方法或者构造方法中</li>
<li>super和this不能同时调用构造方法</li>
</ol>
<p>super和this 的不同：</p>
<p>代表的对象不同：</p>
<ul>
<li>this 调用者这个对象</li>
<li>super 代表父类对象的引用</li>
</ul>
<p>前提：</p>
<ul>
<li>this没有继承也能用</li>
<li>super 只有继承条件才可以使用</li>
</ul>
<p>构造方法：</p>
<ul>
<li>this 用来调用本类的构造方法</li>
<li>super 用来调用父类的构造方法</li>
</ul>
<h3 id="13-方法重写"><a href="#13-方法重写" class="headerlink" title="13.方法重写"></a>13.方法重写</h3><p>重写都是方法的重写 与属性无关</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is Pearson test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is Student test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person A = <span class="keyword">new</span> Student();</span><br><span class="line">        Student B = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        A.test();</span><br><span class="line">        B.test();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220302204559591.png" alt="image-20220302204559591"></p>
<p>注解：有功能的注释</p>
<p>alt+insert 万能键、</p>
<p>重写需要有继承关系 子类重写父类的方法</p>
<ol>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符：范围可以扩大 但不能缩小public&gt;protected&gt;Default&gt;private</li>
<li>抛出的异常：异常的范围可以被缩小 但不能扩大</li>
</ol>
<p>重写 子类的方法和父类要一致，方法体不同</p>
<p>为什么要重写？</p>
<ol>
<li><p>父类的功能，子类不一定需要，或者不一定满足！</p>
<p>alt+Insert : opverride</p>
</li>
</ol>
<h3 id="14-面向对象三大概念——多态"><a href="#14-面向对象三大概念——多态" class="headerlink" title="14.面向对象三大概念——多态"></a>14.面向对象三大概念——多态</h3><ul>
<li><p>同一方法可以根据发送对象的不同采用多种不同的行为方式</p>
</li>
<li><p>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多。 （父类，有关系的类）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fisher.duotai;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fisheryu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/2 20:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fisher.duotai;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fisheryu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/2 20:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fisher.duotai;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Fisheryu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/2 20:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">//new Student();</span></span><br><span class="line">        <span class="comment">//new Person();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以指向的引用类型不确定，父类的引用可以指向子类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Student引用能调用的方法都是自己的 或者 继承父类的方法</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Person父类型可以指向子类 但是不能调用子类独有的方法</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//对象能执行哪些方法，主要看对象左边的类型，和右边的关系不大</span></span><br><span class="line">        s1.run();<span class="comment">//子类重写了父类的方法，则执行子类的方法 具体运行的方法是根据运行期间确定的，而不是根据引用</span></span><br><span class="line">        s2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220302210909497.png" alt="image-20220302210909497"></p>
<ul>
<li>多态是方法的多态</li>
<li>父类和子类之间有联系 需要继承关系（类型转换异常）ClassCastEXception！</li>
<li>存在的条件： 继承关系 方法需要重写 父类引用指向子类</li>
</ul>
<p>静态方法属于类 不属于任何一个实例 不能被重写</p>
<p>final 修饰的方法 在常量池中 不能重写</p>
<p>private方法不能重写</p>
<p>总结：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object object = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure>
<ol>
<li>父类引用指向子类对象</li>
<li>把子类转换为父类，向上转型，可能会丢失原来的一些方法。</li>
<li>把父类转换为子类，向下转型，强制转换。</li>
<li>方便放发的调用，减少重复的代码，简洁。</li>
</ol>
<h3 id="15-instanceof-类型转换（引用类型的类型转换）"><a href="#15-instanceof-类型转换（引用类型的类型转换）" class="headerlink" title="15.instanceof 类型转换（引用类型的类型转换）"></a>15.instanceof 类型转换（引用类型的类型转换）</h3><p>instanceof 判断一个对象是个什么类型</p>
<p>X instance Y </p>
<p>编译能不能通过根据X是否是Y的子类型</p>
<p>运行结果是不是true根据X实际执行的对象是会不是Y的子类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Student();</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);</span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);</span><br><span class="line">        <span class="comment">//编译直接出错</span></span><br><span class="line">        <span class="comment">// System.out.println(person instanceof String);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student);</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);</span><br><span class="line">        <span class="comment">//编译直接出错</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof Teacher);</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof String);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220303164224606.png" alt="image-20220303164224606" style="zoom:67%;" /></p>
<h3 id="16-static关键字"><a href="#16-static关键字" class="headerlink" title="16.static关键字"></a>16.static关键字</h3><ul>
<li><p>static修饰属性</p>
<p>静态属性可以直接通过类名访问</p>
<p>静态属性是某个类中所有对象共享的</p>
<p>1、在内存中存放位置不同  所有带static修饰符的属性或者方法都存放在内存中的方法区 而非静态属性存放在内存中的堆区</p>
<p>2、出现时机不同  静态属性或方法在没创建对象之前就已经存在 而非静态属性在创建对象之后才存在</p>
<p>3、静态属性是在某个类中的所有对象是共享的</p>
<p>4、生命周期不同 静态属性在类消失之后才销毁 而非晶态属性在对象销毁之后才销毁</p>
<p>5、用法：</p>
<p>　　a.静态属性可以直接通过类名直接访问 非静态属性不能通过类直接访问只能通过对象访问</p>
<p>　　b.二者的相同点是都可以在创建完对象后使用下面看个静态属性是在某个类中的所有对象是共享的例子 </p>
</li>
<li><p>static修饰方法 属于类的方法</p>
</li>
<li><p>static匿名代码块</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建对象时会在构造方法前加载匿名代码块 用于赋初值</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载类的时候会调用静态代码块 只执行一次</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220303170558372.png" alt="image-20220303170558372"></p>
<ul>
<li><p>静态import</p>
<p>静态导入包 导入包里的静态方法和静态属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="17-final关键字"><a href="#17-final关键字" class="headerlink" title="17.final关键字"></a>17.final关键字</h3><p>  final修饰的类不能再被继承 （final之后断子绝孙）</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx反向代理</title>
    <url>/2022/01/11/nginx/</url>
    <content><![CDATA[<h1 id="nginx学习笔记"><a href="#nginx学习笔记" class="headerlink" title="nginx学习笔记"></a>nginx学习笔记</h1><span id="more"></span>
<h2 id="nginx作用："><a href="#nginx作用：" class="headerlink" title="nginx作用："></a>nginx作用：</h2><ol>
<li>反向代理</li>
<li>负载均衡</li>
<li>动静分离(缓存)</li>
</ol>
<h2 id="nginx基本原理："><a href="#nginx基本原理：" class="headerlink" title="nginx基本原理："></a>nginx基本原理：</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112174428453.png" alt="image-20220112174428453"></p>
<p>nginx采用master-worker形式进行工作，一个master进程可以有多个woker进程。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112174519781.png" alt="image-20220112174519781"></p>
<p>worker进程之间通过争抢的方式完成任务。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112174701073.png" alt="image-20220112174701073"></p>
<ul>
<li><p>master-workers机制的好处：</p>
<ol>
<li><p>可以使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>进行热部署。</p>
</li>
<li><p>每个进程是独立的进程，nginx同redis类似采用了IO多路复用（windows下没有IO多路复用机制）的机制，当一个worker进程退出后，其他的worker仍可以继续进行争抢，实现请求过程。这样可以保证nginx服务不会中断。</p>
</li>
</ol>
</li>
<li><p>需要设置多少worker比较合适：</p>
<p>每个worker线程都可以把cpu性能发挥到极致，一般worker数量与cpu核心数量相等即可。</p>
</li>
<li><p>worker的连接数：</p>
<p>当仅访问缓存在nginx的静态资源，连接数为2。</p>
<p>需要访问tomcat(服务器)的资源，连接数为4。</p>
<p>当worker最大连接数为1024时，能够支持的最大并发数为（假设一共4个worker）</p>
<script type="math/tex; mode=display">
4*1024/2 == 2048(仅访问缓存资源时)</script></li>
</ul>
<h2 id="nginx分配服务器策略"><a href="#nginx分配服务器策略" class="headerlink" title="nginx分配服务器策略"></a>nginx分配服务器策略</h2><ol>
<li><p>轮询（默认）</p>
<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器宕机，能够自动剔除。</p>
</li>
<li><p>weight</p>
<p>weight代表权重，默认值为1，权重越高被分配的客户端越多。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    	server 192.168.237.131:8080 weight = 10;</span><br><span class="line">    	server 192.168.237.131:8081 weight =  5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ip_hash</p>
<p>每个请求访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题，例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    	ip_hash</span><br><span class="line">    	server 192.168.237.131:<span class="number">8080</span> ;</span><br><span class="line">    	server <span class="number">192.168</span><span class="number">.237</span><span class="number">.131</span>:<span class="number">8081</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>fair</p>
<p>按后端服务器的响应时间进行分配，响应时间短优先分配</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    	server 192.168.237.131:<span class="number">8080</span> ;</span><br><span class="line">    	server <span class="number">192.168</span><span class="number">.237</span><span class="number">.131</span>:<span class="number">8081</span> ;</span><br><span class="line">    	fair</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220111232201962.png" alt="image-20220111232201962"></p>
<p>动静分离实现方案：</p>
<ol>
<li>把静态文件独立成单独的域名，放在独立的服务器上，也是当前主流的方案。</li>
<li>把动态文件和静态文件混合发布，通过nginx分开。 </li>
</ol>
<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>nginx集群保证如果nginx发生宕机，仍然有可用的nginx服务。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112165533959.png" alt="image-20220112165533959"></p>
<p>需要使用keepalived插件，创建一个虚拟ip分别绑定2个主、从nginx服务器。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220112170048433.png" alt="image-20220112170048433"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串类算法笔记</title>
    <url>/2022/04/17/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="字符串类算法笔记"><a href="#字符串类算法笔记" class="headerlink" title="字符串类算法笔记"></a>字符串类算法笔记</h1><span id="more"></span>
<h2 id="1-KMP算法笔记"><a href="#1-KMP算法笔记" class="headerlink" title="1.KMP算法笔记"></a>1.KMP算法笔记</h2><p>以下为2篇kmp详解链接</p>
<p><a href="https://leetcode-cn.com/leetbook/read/array-and-string/cpoo6/">https://leetcode-cn.com/leetbook/read/array-and-string/cpoo6/</a></p>
<p><a href="https://blog.csdn.net/qq_45806146/article/details/104911112?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2">https://blog.csdn.net/qq_45806146/article/details/104911112?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;vector&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; next;</span><br><span class="line">    <span class="comment">//KMP的核心难点 构造next串</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildNext</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.<span class="built_in">size</span>(), j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        next.<span class="built_in">resize</span>(m);</span><br><span class="line">        <span class="comment">// 因为第一个字母没有前缀，所以next[0] = -1</span></span><br><span class="line">        next[<span class="number">0</span>] = t;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; m - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// t &lt; 0 也就是 t == -1,要从模式串的第一位开始匹配，然后主串也要向后移一下</span></span><br><span class="line">            <span class="keyword">if</span> (t &lt; <span class="number">0</span> || s[j] == s[t]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                t++;</span><br><span class="line">                next[j] = t;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t = next[t];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">buildNext</span>(needle);</span><br><span class="line">        <span class="comment">// 指向主串</span></span><br><span class="line">        <span class="keyword">int</span> n = haystack.<span class="built_in">size</span>(), i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 指向模式串</span></span><br><span class="line">        <span class="keyword">int</span> m = needle.<span class="built_in">size</span>(), j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class="line">            <span class="comment">// j &lt; 0 说明 j==-1要从头开始匹配了</span></span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">0</span> || haystack[i] == needle[j]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果j&lt;0说明两个串需要从头开始匹配 主串位置往前增1 模式串从0开始</span></span><br><span class="line">                <span class="comment">// haystack[i] 和 needle[j]不匹配，要从模式串下标为next[j]的继续匹配，也就是最长公共前缀后缀的长度</span></span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果j == m证明模式串匹配完毕，在主串中找到了模式串，范围模式串在主串中出现的第一个下标，i - j</span></span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">            <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="2-寻找旋转排序数组中的最小值"><a href="#2-寻找旋转排序数组中的最小值" class="headerlink" title="2.寻找旋转排序数组中的最小值"></a>2.寻找旋转排序数组中的最小值</h2><p>二分查找</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220309112738817.png" alt="image-20220309112738817"></p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220309112753132.png" alt="image-20220309112753132"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> high = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (low&lt;high)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;nums[high])&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[low];     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>字符串算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>数组类算法笔记</title>
    <url>/2022/01/07/%E6%95%B0%E7%BB%84%E7%B1%BB%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="数组类算法笔记（双指针）"><a href="#数组类算法笔记（双指针）" class="headerlink" title="数组类算法笔记（双指针）"></a>数组类算法笔记（双指针）</h1><span id="more"></span>
<p>数组类算法笔记（双指针）</p>
<h3 id="1-两数之和-II-输入有序数组"><a href="#1-两数之和-II-输入有序数组" class="headerlink" title="1.两数之和 II - 输入有序数组"></a>1.两数之和 II - 输入有序数组</h3><p>给定一个已按照 非递减顺序排列  的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p>
<p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 1 开始计数 ，所以答案数组应当满足 1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length 。</p>
<p>你可以假设每个输入 只对应唯一的答案 ，而且你 不可以 重复使用相同的元素。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入：numbers = [2,7,11,15], target = 9</span><br><span class="line">输出：[1,2]</span><br><span class="line">解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。	</span><br></pre></td></tr></table></figure>
<ul>
<li><p>暴力解法 时间复杂度O(n^2)</p>
</li>
<li><p>unordered_map</p>
<p>unoered_map底层由哈希表实现，索引的查找时间复杂度为O(1)，利用这个性质，一层循环即可实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m.<span class="built_in">count</span>(target - numbers[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;m.<span class="built_in">at</span>(target - numbers[i]), i + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                m.<span class="built_in">emplace</span>(numbers[i], i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对撞指针</p>
<p>两个指针分别指向最小最大数，并不断向中间靠拢。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;numbers, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] + numbers[n] == target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i + <span class="number">1</span>, n + <span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i] + numbers[n] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i] + numbers[n] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-验证回文串"><a href="#2-验证回文串" class="headerlink" title="2.验证回文串"></a>2.验证回文串</h3><p>  给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>
<p>  说明：本题中，我们将空字符串定义为有效的回文串。</p>
<ul>
<li><p>isalnum()判断一个字符是否是字母或数字</p>
<p>int isalnum ( int c );</p>
<p>isalnum() 函数用来检测一个字符是否是字母或者十进制数字。</p>
<p>如果仅仅检测一个字符是否是字母，可以使用 isalpha() 函数；如果仅仅检测一个字符是否是十进制数字，可以使用 isdigit() 函数。</p>
<p>如果一个字符被 isalpha() 或者 isdigit() 检测后返回“真”，那么它被 isalnum() 检测后也一定会返回“真”。</p>
<p>标准 ASCII 编码共包含了 128 个字符，不同的字符属于不同的分类，我们在 <a href="[ctype.h](http://c.biancheng.net/ref/ctype_h/)">[ctype.h](http://c.biancheng.net/ref/ctype_h/)</a> 头文件中给出了详细的列表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释：&quot;amanaplanacanalpanama&quot; 是回文串</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-长度最小的子数组"><a href="#3-长度最小的子数组" class="headerlink" title="3.长度最小的子数组"></a>3.长度最小的子数组</h3><ul>
<li><p>暴力破解法 </p>
<p>时间复杂度 $O(n^2)$,从头到尾遍历所有满足&gt;=target的子数组，并将最短长度返回。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j ;</span><br><span class="line">        <span class="keyword">int</span> sum;</span><br><span class="line">        <span class="keyword">int</span> length = nums.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=target) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;nums.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;=target&amp;&amp;(j-i+<span class="number">1</span>)&lt;length)&#123;</span><br><span class="line">                    length = j - i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length==nums.<span class="built_in">size</span>()+<span class="number">1</span>?<span class="number">0</span>:length;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>滑动窗口法</p>
<p>减少了每次重新定位右侧边界的时间。先不断增大右侧边界以达到target，再不断缩减左侧边界以保证最小长度。近遍历一次数组并随时存储满足target的最小长度。</p>
<p>时间复杂度$O(2n)$,空间复杂度$O(1)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = nums.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j&lt;nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">                length = <span class="built_in">min</span>(length,j-i+<span class="number">1</span>);</span><br><span class="line">                sum -= nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length==nums.<span class="built_in">size</span>()+<span class="number">1</span>?<span class="number">0</span>:length;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="4-二维数组-旋转矩阵"><a href="#4-二维数组-旋转矩阵" class="headerlink" title="4.二维数组 旋转矩阵"></a>4.二维数组 旋转矩阵</h3><p>给你一幅由 <code>N × N</code> 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。</p>
<p>不占用额外内存空间能否做到？</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227103311271.png" alt="image-20220227103311271"></p>
<ul>
<li>借助辅助矩阵  (空间复杂度 $O(N^2)$)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; newMatix = matrix;<span class="comment">//此处数组的拷贝是值拷贝 获得一个新的数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                newMatix[j][n<span class="number">-1</span>-i] = matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        matrix = newMatix;<span class="comment">//此处同样是值拷贝</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>每次旋转4个位置  空间复杂度$O(1)$</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227105639686.png" alt="image-20220227105639686"></p>
</li>
</ul>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227105700261.png" alt="image-20220227105700261"></p>
<p>关键变换：<img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227105728343.png" alt="image-20220227105728343"></p>
<p>代入4次：</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227105750529.png" alt="image-20220227105750529"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;<span class="comment">// n为奇数的n-1/2 == n为偶数的n/2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;(n+<span class="number">1</span>)/<span class="number">2</span>;j++)&#123;<span class="comment">//n为奇数的n+1/2 == n为偶数的n/2</span></span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            temp = matrix[i][j];</span><br><span class="line">            matrix[i][j] = matrix[n-j<span class="number">-1</span>][i];</span><br><span class="line">            matrix[n-j<span class="number">-1</span>][i] = matrix[n-i<span class="number">-1</span>][n<span class="number">-1</span>-j];</span><br><span class="line">            matrix[n-i<span class="number">-1</span>][n<span class="number">-1</span>-j] = matrix[j][n<span class="number">-1</span>-i]; </span><br><span class="line">            matrix[j][n<span class="number">-1</span>-i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对称2次 空间复杂度$O(1)$</li>
</ul>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227110155841.png" alt="image-20220227110155841"></p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220227110238605.png" alt="image-20220227110238605"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(matrix[i][j],matrix[n<span class="number">-1</span>-i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(matrix[i][j],matrix[j][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a,<span class="keyword">int</span>&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-零矩阵"><a href="#5-零矩阵" class="headerlink" title="5.零矩阵"></a>5.零矩阵</h3><p>编写一种算法，若M × N矩阵中某个元素为0，则将其所在的行与列清零。</p>
<ul>
<li>空间复杂度$O(n^2)$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">row</span><span class="params">(m)</span>, <span class="title">col</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!matrix[i][j]) &#123;</span><br><span class="line">                    row[i] = col[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (row[i] || col[j]) &#123;</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>空间复杂度$O(1)$ 2个存储空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> col = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!matrix[i][<span class="number">0</span>])&#123;</span><br><span class="line">            row = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!matrix[<span class="number">0</span>][j])&#123;</span><br><span class="line">            col = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!matrix[i][j])&#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((!matrix[<span class="number">0</span>][j])||(!matrix[i][<span class="number">0</span>]))&#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(row)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(col)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>空间复杂度$O(1)$ 1个存储空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> flag_col0 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!matrix[i][<span class="number">0</span>]) &#123;</span><br><span class="line">            flag_col0 = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!matrix[i][j]) &#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!matrix[i][<span class="number">0</span>] || !matrix[<span class="number">0</span>][j]) &#123;</span><br><span class="line">                matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag_col0) &#123;</span><br><span class="line">            matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组类算法（双指针）</tag>
      </tags>
  </entry>
  <entry>
    <title>数组类算法笔记2</title>
    <url>/2022/03/01/%E6%95%B0%E7%BB%84%E7%B1%BB%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h1 id="数组类算法笔记2"><a href="#数组类算法笔记2" class="headerlink" title="数组类算法笔记2"></a>数组类算法笔记2</h1><span id="more"></span>
<h2 id="1-寻找数组的中心索引"><a href="#1-寻找数组的中心索引" class="headerlink" title="1.寻找数组的中心索引"></a>1.寻找数组的中心索引</h2><p>给你一个整数数组 nums ，请计算数组的 中心下标 。</p>
<p>数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>
<p>如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>
<p>如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。</p>
<ul>
<li>遍历整个数组，分别计算中轴两侧数值和是否相等。(计算量大，每次需要计算两边数组的和，超时)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot;</span><br><span class="line">        <span class="keyword">for</span>(pivot =<span class="number">0</span>;pivot&lt;nums.<span class="built_in">size</span>();pivot ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">sum</span>(nums,<span class="number">0</span>,pivot<span class="number">-1</span>) == <span class="built_in">sum</span>(nums,pivot+<span class="number">1</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> pivot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="number">-1</span> || left == nums.<span class="built_in">size</span>()) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left;i&lt;=right;i++)&#123;</span><br><span class="line">            res += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>先计算整个数组的和，删去中轴元素即为右侧和，比较当前左侧和右侧和是否相等，不相等则给左侧和加上删去的数，进行下一次遍历。</p>
<p>减少了重复计算的工作量，不需要每次循环都计算左右两侧的元素和。</p>
<ol>
<li><p>先求得数组中所有元素之和sum；</p>
</li>
<li><p>遍历数组，取当前下标左边的元素之和left_sum，同时sum减去已遍历元素，比较二者是否相等，相等则返回当前下标；</p>
</li>
<li>遍历结束，代表没有中心索引，返回-1；</li>
</ol>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lsum = <span class="number">0</span>;<span class="comment">//中轴元素左侧元素之和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pivot = <span class="number">0</span>; pivot &lt;nums.<span class="built_in">size</span>();pivot++)&#123;</span><br><span class="line">            sum -= nums[pivot];</span><br><span class="line">            <span class="keyword">if</span>(lsum == sum) <span class="keyword">return</span> pivot;</span><br><span class="line">            lsum += nums[pivot];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-搜索数组插入位置"><a href="#2-搜索数组插入位置" class="headerlink" title="2.搜索数组插入位置"></a>2.搜索数组插入位置</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>请必须使用时间复杂度为 O(log n) 的算法。</p>
<ul>
<li><p>最简单的思路</p>
<ol>
<li>如果数组中的值大于或者等于target，直接return</li>
<li>如果全部遍历完证明target是最大的数，直接插入末尾</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]&gt;=target) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>二分查找，</p>
<p><strong>前提是查找的数组是一个有序数组。如果二分查找没有找到结果，则left所在位置即为查找数字的期望所在位置！！！</strong></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-合并数组"><a href="#3-合并数组" class="headerlink" title="3.合并数组"></a>3.合并数组</h2><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p>
<p>示例 1：</p>
<p>输入：intervals = [[1,3],[2,6],[8,10],[15,18]]<br>输出：[[1,6],[8,10],[15,18]]<br>解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</p>
<p>返回vector的最后一个元素的引用 vec.back()</p>
<p>思路：首先，我们将列表中的区间按照左端点升序排序。然后我们将第一个区间加入 merged 数组中，并按顺序依次考虑之后的每个区间：</p>
<p>如果当前区间的左端点在数组 merged 中最后一个区间的右端点之后，那么它们不会重合，我们可以直接将这个区间加入数组 merged 的末尾；</p>
<p>否则，它们重合，我们需要用当前区间的右端点更新数组 merged 中最后一个区间的右端点，将其置为二者的较大值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> l,r;</span><br><span class="line">        l = intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        r = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        res.<span class="built_in">push_back</span>(intervals[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;intervals.<span class="built_in">size</span>();i++)&#123; <span class="comment">//size()返回的是二维数组中元素的个数</span></span><br><span class="line">            <span class="keyword">if</span>(r&lt;intervals[i][<span class="number">0</span>])&#123;</span><br><span class="line">                l = intervals[i][<span class="number">0</span>];</span><br><span class="line">                r = intervals[i][<span class="number">1</span>];</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.<span class="built_in">back</span>()[<span class="number">1</span>] = <span class="built_in">max</span>(r,intervals[i][<span class="number">1</span>]); <span class="comment">//Returns a read/write reference to the data at the last element of the vector.</span></span><br><span class="line">                r = res.<span class="built_in">back</span>()[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(),intervals.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;intervals.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = intervals[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> r = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(!res.<span class="built_in">size</span>() || res.<span class="built_in">back</span>()[<span class="number">1</span>]&lt;l)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.<span class="built_in">back</span>()[<span class="number">1</span>] = <span class="built_in">max</span>(r,res.<span class="built_in">back</span>()[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-二维数组-对角线遍历"><a href="#4-二维数组-对角线遍历" class="headerlink" title="4.二维数组 对角线遍历"></a>4.二维数组 对角线遍历</h2><p>给你一个大小为 <code>m x n</code> 的矩阵 <code>mat</code> ，请以对角线遍历的顺序，用一个数组返回这个矩阵中的所有元素。</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220301205651422.png" alt="image-20220301205651422"></p>
<p>思路：</p>
<p>设元素当前行列坐标为(x,y),元素如果下一次要向左下移动(x+1, y-1)和右上移动(x-1, y+1)的话，并不会改变当前(行 + 列)的和;<br>if (x + y)是偶数, 那么下一次就是往右上移动, 是奇数的话下一次就是往左下移动；<br>左下 = [x+1, y-1]:<br>如果在最后一行 =&gt; 向右 <a href="先判断行, 防止在左下角的时候向下则越界">x+0, y+1</a>;<br>如果在第一列 =&gt; 向下 [x+1, y+0];<br>右上 = [x-1, y+1]:<br>如果在最后一列 =&gt; 向下 <a href="先判断列, 防止在右上角时候向右则越界">x+1, y+0</a>;<br>如果在第一行 =&gt; 向右 [x+0, y+1];</p>
<p>注意：左上右下的顺序各自有区分！！</p>
<ul>
<li>第一列也可以在最后一行，但最后一行的第一列必须向右（左下角）</li>
<li>最后一列也可以在第一行，但第一行的最后一列只能向下（右上角）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">findDiagonalOrder</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> row = mat.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> col = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> n = row*col;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(mat[x][y]);</span><br><span class="line">            <span class="keyword">if</span>((x+y)%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(y == col<span class="number">-1</span>)&#123;</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    x--;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(x == row<span class="number">-1</span>)&#123;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y == <span class="number">0</span>)&#123;</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    x++;</span><br><span class="line">                    y--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-最长回文字符串"><a href="#5-最长回文字符串" class="headerlink" title="5.最长回文字符串"></a>5.最长回文字符串</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p>动态规划</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//长度为0或仅一个字符 为回文字符串 返回</span></span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">length</span>()&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxlen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(n,vector&lt;<span class="keyword">int</span>&gt; (n));</span><br><span class="line">        <span class="comment">//单个字符为回文串 作为dp的最基本单元</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> L = <span class="number">2</span>;L&lt;=n;L++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> j  = i + L - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=n) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[i] != s[j])&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j-i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                        dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        dp[i][j] = dp[i+<span class="number">1</span>][j<span class="number">-1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(dp[i][j]&amp;&amp;(j-i+<span class="number">1</span>)&gt;maxlen)&#123;</span><br><span class="line">                    maxlen = j-i+<span class="number">1</span>;</span><br><span class="line">                    flag = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(flag,maxlen);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>中心扩展算法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span> len,len1,len2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            len1 = <span class="built_in">expandCenter</span>(s,i,i);</span><br><span class="line">            len2 = <span class="built_in">expandCenter</span>(s,i,i+<span class="number">1</span>);</span><br><span class="line">            len = <span class="built_in">max</span>(len1,len2);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(len&gt;end-start+<span class="number">1</span>)&#123;</span><br><span class="line">                start = i - (len<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">                end = i + len/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start,end-start+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">expandCenter</span><span class="params">(string s,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left&gt;=<span class="number">0</span>&amp;&amp;right&lt;s.<span class="built_in">length</span>()&amp;&amp;s[left] == s[right])&#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right-left<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-拆分数组1"><a href="#6-拆分数组1" class="headerlink" title="6.拆分数组1"></a>6.拆分数组1</h2><p>给定长度为 2n 的整数数组 nums ，你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从 1 到 n 的 min(ai, bi) 总和最大。</p>
<p>返回该 最大总和 </p>
<ul>
<li>思路：先排序 后求和</li>
</ul>
<p>采用快排</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">QuickSort</span>(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i+=<span class="number">2</span>)&#123;</span><br><span class="line">        sum+=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="built_in">Parition</span>(nums,left,right);</span><br><span class="line">        <span class="built_in">QuickSort</span>(nums,left,pos<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(nums,pos+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Parition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = nums[left];</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right]&gt;temp)right--;</span><br><span class="line">        nums[left] = nums[right];</span><br><span class="line">        <span class="comment">//注意快排下式的等号 如果没有这个&lt;=的=，就会进入死循环！！ 6,6,5,2,1,3</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left]&lt;=temp) left++;</span><br><span class="line">        nums[right] = nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">    nums[left] = temp;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-杨辉三角2"><a href="#7-杨辉三角2" class="headerlink" title="7.杨辉三角2"></a>7.杨辉三角2</h2><p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code> 行。</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220308153029722.png" alt="image-20220308153029722"></p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220308152002493.png" alt="image-20220308152002493"></p>
<p>基于公式$C^i<em>n =C^{i-1}</em>{n-1}+C^i_{n-1}$</p>
<p>$O(n^2)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">num</span>(rowIndex+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;rowIndex+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            num[i].<span class="built_in">resize</span>(i+<span class="number">1</span>);</span><br><span class="line">            num[i][<span class="number">0</span>] = num[i][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                num[i][j] = num[i<span class="number">-1</span>][j<span class="number">-1</span>]+num[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num[rowIndex];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>递归 超过$O(n^2)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">num</span><span class="params">(rowIndex+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;rowIndex+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            num[i] = <span class="built_in">triangle</span>(rowIndex,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">triangle</span><span class="params">(<span class="keyword">int</span> rowIndex,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> ||i==rowIndex) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">triangle</span>(rowIndex<span class="number">-1</span>,i<span class="number">-1</span>)+<span class="built_in">triangle</span>(rowIndex<span class="number">-1</span>,i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>递推式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; pre, cur;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rowIndex; ++i) &#123;</span><br><span class="line">            cur.<span class="built_in">resize</span>(i + <span class="number">1</span>);</span><br><span class="line">            cur[<span class="number">0</span>] = cur[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                cur[j] = pre[j - <span class="number">1</span>] + pre[j];</span><br><span class="line">            &#125;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>将空间复杂度2n降到n,倒着计算当前行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">row</span><span class="params">(rowIndex + <span class="number">1</span>)</span></span>;</span><br><span class="line">        row[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">                row[j] += row[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>时间复杂度$O(rowIndex)$做法 以下拷贝官方解 官方解有问题</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220308152827899.png" alt="image-20220308152827899"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">row</span><span class="params">(rowIndex + <span class="number">1</span>)</span></span>;</span><br><span class="line">        row[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; ++i) &#123;</span><br><span class="line">            row[i] = <span class="number">1LL</span> * row[i - <span class="number">1</span>] * (rowIndex - i + <span class="number">1</span>) / i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="8-轮转数组"><a href="#8-轮转数组" class="headerlink" title="8.轮转数组"></a>8.轮转数组</h2><ul>
<li>使用临时空间</li>
</ul>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220318152902508.png" alt="image-20220318152902508"></p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220318152911180.png" alt="image-20220318152911180"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span>(k == n) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(k&gt;n) k = k%n;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">temp</span><span class="params">(k)</span></span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">    temp[k<span class="number">-1</span>-i] = nums[n<span class="number">-1</span>-i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>-k;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    nums[n<span class="number">-1</span>-j] = nums[i];</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">    nums[i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>翻转<img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220318152957859.png" alt="image-20220318152957859"></li>
</ul>
<h2 id="9-只出现一次的数字"><a href="#9-只出现一次的数字" class="headerlink" title="9.只出现一次的数字"></a>9.只出现一次的数字</h2><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>位运算：</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220320103737882.png" alt="image-20220320103737882"></p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220320103755119.png" alt="image-20220320103755119"></p>
<h2 id="10-两个数组的交集"><a href="#10-两个数组的交集" class="headerlink" title="10.两个数组的交集"></a>10.两个数组的交集</h2><p>给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</p>
<ul>
<li>hash表 时间$O(n+m)$ 空间$O(min(n,m))$</li>
</ul>
<p>由于同一个数字在两个数组中都可能出现多次，因此需要用哈希表存储每个数字出现的次数。对于一个数字，其在交集中出现的次数等于该数字在两个数组中出现次数的最小值。</p>
<p>首先遍历第一个数组，并在哈希表中记录第一个数组中的每个数字以及对应出现的次数，然后遍历第二个数组，对于第二个数组中的每个数字，如果在哈希表中存在这个数字，则将该数字添加到答案，并减少哈希表中该数字出现的次数。</p>
<p>为了降低空间复杂度，首先遍历较短的数组并在哈希表中记录每个数字以及对应出现的次数，然后遍历较长的数组得到交集。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums1, vector&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1.<span class="built_in">size</span>()&gt;nums2.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">intersect</span>(nums2,nums1);</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums1.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            m[nums1[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;nums2.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m.<span class="built_in">count</span>(nums2[j])&amp;&amp;m[nums2[j]]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                m[nums2[j]] --;</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums2[j]);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>双指针 时间$O(nlogn+mlogm)$ 空间$O(1)$</li>
</ul>
<p>如果两个数组是有序的，则可以使用双指针的方法得到两个数组的交集。</p>
<p>首先对两个数组进行排序，然后使用两个指针遍历两个数组。</p>
<p>初始时，两个指针分别指向两个数组的头部。每次比较两个指针指向的两个数组中的数字，如果两个数字不相等，则将指向较小数字的指针右移一位，如果两个数字相等，将该数字添加到答案，并将两个指针都右移一位。当至少有一个指针超出数组范围时，遍历结束。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">intersect</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums1, vector&lt;<span class="keyword">int</span>&gt; &amp;nums2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> m = nums2.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(),nums1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(nums2.<span class="built_in">begin</span>(),nums2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[i] == nums2[j])</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(nums1[i]);</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i] &lt; nums2[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-二分查找"><a href="#12-二分查找" class="headerlink" title="12.二分查找"></a>12.二分查找</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt;= high)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target) low = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target) high = mid<span class="number">-1</span>;</span><br><span class="line">            mid = (high+low)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="13-螺旋矩阵"><a href="#13-螺旋矩阵" class="headerlink" title="13.螺旋矩阵"></a>13.螺旋矩阵</h2><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> n = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">  			<span class="comment">//方向矩阵</span></span><br><span class="line">        <span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"> 				<span class="comment">//记录当前位置是否遍历过 遍历过则换方向</span></span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">st</span>(n,vector&lt;<span class="keyword">bool</span>&gt; (m));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>,x=<span class="number">0</span>,y=<span class="number">0</span>,d=<span class="number">0</span>;i&lt;m*n;i++)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(matrix[x][y]);</span><br><span class="line">            st[x][y] = <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> a = x+dx[d],b = y+dy[d];</span><br><span class="line">          <span class="comment">//越界或已经遍历则换方向</span></span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">0</span>||a&gt;=n||b&lt;<span class="number">0</span>||b&gt;=m||st[a][b])&#123;</span><br><span class="line">                d = (d+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">                a = x+dx[d];</span><br><span class="line">                b = y+dy[d];</span><br><span class="line">            &#125;</span><br><span class="line">            x = a;</span><br><span class="line">            y = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数组类算法</tag>
      </tags>
  </entry>
  <entry>
    <title>树算法笔记</title>
    <url>/2022/04/17/%E6%A0%91%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="树算法笔记"><a href="#树算法笔记" class="headerlink" title="树算法笔记"></a>树算法笔记</h1><span id="more"></span>
<h2 id="1-深度优先搜索-DFS"><a href="#1-深度优先搜索-DFS" class="headerlink" title="1.深度优先搜索 DFS"></a>1.深度优先搜索 DFS</h2><p>涉及问题： 算法思路较为奇怪 或对空间要求比较高的</p>
<ul>
<li>尽量往深处搜，到了叶节点会回溯</li>
<li>使用栈</li>
<li>空间 $O(h）$</li>
<li>不具有最短性 </li>
</ul>
<ul>
<li>回溯</li>
</ul>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220411093920803.png" alt="image-20220411093920803"></p>
<p>使用递归写DFS，系统通过隐藏栈完成回溯</p>
<p>注意恢复现场</p>
<ul>
<li>剪枝</li>
</ul>
<p>经典题目：</p>
<p>排列数字</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220411101410935.png" alt="image-20220411101410935"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> path[N];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u ==n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i x=<span class="number">0</span> ;i&lt;n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;path[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(u!=n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">                path[u] = i;</span><br><span class="line">                st[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">                st[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>全排列2：</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220411110009510.png" alt="image-20220411110009510"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @before-stub-for-debug-begin</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// @before-stub-for-debug-end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=47 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [47] 全排列 II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">    vector&lt;<span class="keyword">bool</span>&gt; st;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="comment">//对原数组进行排序</span></span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        path = vector&lt;<span class="keyword">int</span>&gt; (nums.<span class="built_in">size</span>());</span><br><span class="line">        st = vector&lt;<span class="keyword">bool</span>&gt; (nums.<span class="built_in">size</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">dfs</span>(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp; nums, <span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == u)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[i])&#123;</span><br><span class="line">                <span class="comment">//保证每次使用的数都是未使用相同数的第一个 从而保证不产生重复 定序</span></span><br><span class="line">                <span class="keyword">if</span>(i&amp;&amp;nums[i<span class="number">-1</span>] == nums[i]&amp;&amp; !st[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                st[i] = <span class="literal">true</span>;</span><br><span class="line">                path[u] = nums[i];</span><br><span class="line">                <span class="built_in">dfs</span>(nums,u+<span class="number">1</span>);</span><br><span class="line">                st[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-宽度优先搜索-BFS"><a href="#2-宽度优先搜索-BFS" class="headerlink" title="2.宽度优先搜索 BFS"></a>2.宽度优先搜索 BFS</h2><p>涉及问题： 最小步数 最短距离 最少操作次数</p>
<ul>
<li>分别将每一层遍历</li>
<li>使用队列</li>
<li>空间$O(2^h)$</li>
<li>最短路 每次遍历的点是最近的点</li>
</ul>
<h2 id="3-树与图的存储"><a href="#3-树与图的存储" class="headerlink" title="3.树与图的存储"></a>3.树与图的存储</h2><h2 id="4-计算树的最大深度"><a href="#4-计算树的最大深度" class="headerlink" title="4.计算树的最大深度"></a>4.计算树的最大深度</h2><p>计算一个二叉树的最大深度：</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220412223135026.png" alt="image-20220412223135026" style="zoom:33%;" /></p>
<p>A点到叶子节点的距离为 max(A的左子树B到叶子节点的距离,A的右子树B到叶子节点的距离）+ 1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left),<span class="built_in">maxDepth</span>(root-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-验证二叉搜索树"><a href="#5-验证二叉搜索树" class="headerlink" title="5.验证二叉搜索树"></a>5.验证二叉搜索树</h2><p>lc.98 </p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220414110557502.png" alt="image-20220414110557502"></p>
<ul>
<li>根据定义</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       vector&lt;<span class="keyword">int</span>&gt; res = <span class="built_in">isBST</span>(root);</span><br><span class="line">       <span class="keyword">return</span> res[<span class="number">0</span>]?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">isBST</span><span class="params">(TreeNode * root)</span></span>&#123;</span><br><span class="line">       <span class="comment">//res[0]是否搜索树 res[1]当前子树最小值 re[2]当前子树最大值</span></span><br><span class="line">       <span class="comment">//不考虑左右子树，最小值最大值都为根节点</span></span><br><span class="line">       <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(&#123;<span class="number">1</span>,root-&gt;val,root-&gt;val&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(root-&gt;left)&#123;</span><br><span class="line">           vector&lt;<span class="keyword">int</span>&gt; t  = <span class="built_in">isBST</span>(root-&gt;left);</span><br><span class="line">           <span class="keyword">if</span>(!t[<span class="number">0</span>]||t[<span class="number">2</span>]&gt;=root-&gt;val)&#123;</span><br><span class="line">               res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           res[<span class="number">1</span>] = <span class="built_in">min</span>(res[<span class="number">1</span>],t[<span class="number">1</span>]);<span class="comment">//当前子树最小值是左子树的最小值和根节点最小值</span></span><br><span class="line">           res[<span class="number">2</span>] = <span class="built_in">max</span>(res[<span class="number">2</span>],t[<span class="number">2</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(root-&gt;right)&#123;</span><br><span class="line">           vector&lt;<span class="keyword">int</span>&gt; t = <span class="built_in">isBST</span>(root-&gt;right);</span><br><span class="line">           <span class="keyword">if</span>(!t[<span class="number">0</span>]||t[<span class="number">1</span>]&lt;=root-&gt;val)&#123;</span><br><span class="line">               res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           res[<span class="number">1</span>] = <span class="built_in">min</span>(res[<span class="number">1</span>],t[<span class="number">1</span>]);<span class="comment">//当前子树最小值是右子树的最小值和根节点最小值</span></span><br><span class="line">           res[<span class="number">2</span>] = <span class="built_in">max</span>(res[<span class="number">2</span>],t[<span class="number">2</span>]);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>中序遍历</li>
</ul>
<p>中序遍历得到一个有序数组即为二叉搜索树</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> pre = LONG_MIN;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isBST</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBST</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">bool</span> l = <span class="built_in">isBST</span>(root-&gt;left);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果当前节点小于等于中序遍历的前一个节点 返回false</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;val &lt;= pre) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        pre = root-&gt;val;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> r = <span class="built_in">isBST</span>(root-&gt;right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> l&amp;&amp;r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-对称二叉树"><a href="#6-对称二叉树" class="headerlink" title="6.对称二叉树"></a>6.对称二叉树</h2><p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220414163900108.png" alt="image-20220414163900108" style="zoom: 33%;" /></p>
<p>只需验证：</p>
<ul>
<li>左子树根节点与右子树根节点是否相同</li>
<li>左子树的左子树与右子树的右子树是否相同</li>
<li>左子树的右子树与右子树的左子树是否相同</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">isSym</span>(root-&gt;left,root-&gt;right);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">isSym</span><span class="params">(TreeNode * rootleft,TreeNode * rootright)</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!rootleft&amp;&amp;!rootright) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">if</span>(!rootleft||!rootright||rootleft-&gt;val!=rootright-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="comment">//剩下的情况为左右子树根节点相同</span></span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">isSym</span>(rootleft-&gt;right,rootright-&gt;left)&amp;&amp;<span class="built_in">isSym</span>(rootleft-&gt;left,rootright-&gt;right);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>树算法笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列概述</title>
    <url>/2022/01/02/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><span id="more"></span>
<h2 id="1-消息队列概述"><a href="#1-消息队列概述" class="headerlink" title="1.消息队列概述"></a>1.消息队列概述</h2><h3 id="一、-消息队列概述"><a href="#一、-消息队列概述" class="headerlink" title="一、 消息队列概述"></a>一、 消息队列概述</h3><p>消息队列中间件是分布式系统中重要的组件，主要解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。</p>
<p>目前在生产环境，使用较多的消息队列有ActiveMQ、RabbitMQ、ZeroMQ、Kafka、MetaMQ、RocketMQ等。</p>
<h3 id="二、-消息队列应用场景"><a href="#二、-消息队列应用场景" class="headerlink" title="二、 消息队列应用场景"></a>二、 消息队列应用场景</h3><p>下面详细介绍一下消息队列在实际应用中常用的使用场景。场景分为异步处理、应用解耦、流量削锋和消息通讯四个场景。</p>
<h4 id="2-1-异步处理"><a href="#2-1-异步处理" class="headerlink" title="2.1 异步处理"></a>2.1 异步处理</h4><blockquote>
<p>场景说明：用户注册后，需要发送注册邮件和发送注册信息，传统的做法有两种：串行方式、并行方式</p>
</blockquote>
<h3 id="串行方式"><a href="#串行方式" class="headerlink" title="串行方式"></a>串行方式</h3><p>将注册信息写入数据库成功后，发送注册邮件，然后发送注册短信，而所有任务执行完成后，返回信息给客户端</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133531221.png" alt="image-20220105133531221"></p>
<p>串行方式</p>
<h3 id="并行方式"><a href="#并行方式" class="headerlink" title="并行方式"></a>并行方式</h3><p>将注册信息写入数据库成功后，同时进行发送注册邮件和发送注册短信的操作。而所有任务执行完成后，返回信息给客户端。同串行方式相比，并行方式可以提高执行效率，减少执行时间。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133827633.png" alt="image-20220105133827633"></p>
<p>并行方式</p>
<p>上面的比较可以发现，假设三个操作均需要50ms的执行时间，排除网络因素，则最终执行完成，串行方式需要150ms，而并行方式需要100ms。</p>
<p>因为cpu在单位时间内处理的请求数量是一致的，假设：CPU每1秒吞吐量是100此，则串行方式1秒内可执行的请求量为1000/150，不到7次；并行方式1秒内可执行的请求量为1000/100，为10次。</p>
<p>由上可以看出，传统串行和并行的方式会受到系统性能的局限，那么如何解决这个问题？<br> 我们需要引入消息队列，将不是必须的业务逻辑，异步进行处理，由此改造出来的流程为</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133600559.png" alt="image-20220105133600559"></p>
<p>引入消息队列，异步处理消息</p>
<p>根据上述的流程，用户的响应时间基本相当于将用户数据写入数据库的时间，发送注册邮件、发送注册短信的消息在写入消息队列后，即可返回执行结果，写入消息队列的时间很快，几乎可以忽略，也有此可以将系统吞吐量提升至20QPS，比串行方式提升近3倍，比并行方式提升2倍。</p>
<h4 id="2-2-应用解耦"><a href="#2-2-应用解耦" class="headerlink" title="2.2 应用解耦"></a>2.2 应用解耦</h4><blockquote>
<p>场景说明：用户下单后，订单系统需要通知库存系统。</p>
</blockquote>
<p>传统的做法为：订单系统调用库存系统的接口。如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133616537.png" alt="image-20220105133616537"></p>
<p>传统方式：调用库存接口</p>
<p>传统方式具有如下缺点：<br> -1. 假设库存系统访问失败，则订单减少库存失败，导致订单创建失败<br> -2. 订单系统同库存系统过度耦合</p>
<p>如何解决上述的缺点呢？需要引入消息队列，引入消息队列后的架构如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133627872.png" alt="image-20220105133627872"></p>
<p>引入消息队列，实现应用解耦</p>
<ul>
<li>订单系统：用户下单后，订单系统进行数据持久化处理，然后将消息写入消息队列，返回订单创建成功</li>
<li>库存系统：使用拉/推的方式，获取下单信息，库存系统根据订单信息，进行库存操作。</li>
</ul>
<p>假如在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其后续操作了。由此实现了订单系统与库存系统的应用解耦。</p>
<h4 id="2-3-流量削锋"><a href="#2-3-流量削锋" class="headerlink" title="2.3 流量削锋"></a>2.3 流量削锋</h4><p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛。</p>
<blockquote>
<p>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p>
</blockquote>
<ol>
<li>可以控制参与活动的人数；</li>
<li>可以缓解短时间内高流量对应用的巨大压力；</li>
</ol>
<p>流量削锋处理方式系统图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133638337.png" alt="image-20220105133638337"></p>
<p>流量削锋方式系统图</p>
<ol>
<li>服务器在接收到用户请求后，首先写入消息队列。这时如果消息队列中消息数量超过最大数量，则直接拒绝用户请求或返回跳转到错误页面；</li>
<li>秒杀业务根据秒杀规则读取消息队列中的请求信息，进行后续处理。</li>
</ol>
<h4 id="2-4-日志处理"><a href="#2-4-日志处理" class="headerlink" title="2.4 日志处理"></a>2.4 日志处理</h4><p>日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133649540.png" alt="image-20220105133649540"></p>
<p>消息队列应用于日志处理的架构</p>
<ul>
<li>日志采集客户端：负责日志数据采集，定时写受写入Kafka队列；</li>
<li>Kafka消息队列：负责日志数据的接收，存储和转发；</li>
<li>日志处理应用：订阅并消费kafka队列中的日志数据；</li>
</ul>
<p>这种架构在实际开发中的应用，可以参照案例：<a href="https://link.jianshu.com?t=http://cloud.51cto.com/art/201507/484338.htm">新浪技术分享：我们如何扛下32亿条实时日志的分析处理</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133703715.png" alt="image-20220105133703715"></p>
<p>服务的技术架构设计</p>
<ol>
<li>Kafka：接收用户日志的消息队列。</li>
<li>Logstash：做日志解析，统一成JSON输出给Elasticsearch。</li>
<li>Elasticsearch：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能。</li>
<li>Kibana：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因。</li>
</ol>
<h4 id="2-5-消息通讯"><a href="#2-5-消息通讯" class="headerlink" title="2.5 消息通讯"></a>2.5 消息通讯</h4><p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列、聊天室等。</p>
<h3 id="点对点通讯"><a href="#点对点通讯" class="headerlink" title="点对点通讯"></a>点对点通讯</h3><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133713336.png" alt="image-20220105133713336"></p>
<p>点对点通讯架构设计</p>
<p>在点对点通讯架构设计中，客户端A和客户端B共用一个消息队列，即可实现消息通讯功能。</p>
<h3 id="聊天室通讯"><a href="#聊天室通讯" class="headerlink" title="聊天室通讯"></a>聊天室通讯</h3><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133751627.png" alt="image-20220105133751627"></p>
<p>聊天室通讯架构设计</p>
<p>客户端A、客户端B、直至客户端N订阅同一消息队列，进行消息的发布与接收，即可实现聊天通讯方案架构设计。</p>
<h3 id="三、-消息中间件示例"><a href="#三、-消息中间件示例" class="headerlink" title="三、 消息中间件示例"></a>三、 消息中间件示例</h3><h4 id="3-1-电商系统"><a href="#3-1-电商系统" class="headerlink" title="3.1 电商系统"></a>3.1 电商系统</h4><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133854509.png" alt="image-20220105133854509"></p>
<p>电商系统架构示意图</p>
<p>消息队列采用高可用、可持久化的消息中间件。比如Active MQ，Rabbit MQ，Rocket MQ。</p>
<ul>
<li>应用将主干逻辑处理完成后，写入消息队列。消息发送是否成功可以开启消息的确认模式。（消息队列返回消息接收成功状态后，应用再返回，这样保障消息的完整性）</li>
<li>扩展流程（发短信、配送处理）订阅队列消息。采用推或拉的方式获取消息并处理。</li>
<li>消息将应用解耦的同时，带来了数据一致性问题，可以采用最终一致性方式解决。比如主数据写入数据库，扩展应用根据消息队列，并结合数据库方式实现基于消息队列的后续处理。</li>
</ul>
<h4 id="3-2-日志收集系统"><a href="#3-2-日志收集系统" class="headerlink" title="3.2 日志收集系统"></a>3.2 日志收集系统</h4><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133903358.png" alt="image-20220105133903358"></p>
<p>日志收集系统架构示意图</p>
<p>分为Zookeeper注册中心，日志收集客户端，Kafka集群和Storm集群（OtherApp）四部分组成。</p>
<ul>
<li>Zookeeper注册中心，提出负载均衡和地址查找服务；</li>
<li>日志收集客户端，用于采集应用系统的日志，并将数据推送到kafka队列；</li>
<li>Kafka集群：接收，路由，存储，转发等消息处理；</li>
<li>Storm集群：与OtherApp处于同一级别，采用拉的方式消费队列中的数据；</li>
</ul>
<h3 id="四、JMS消息服务"><a href="#四、JMS消息服务" class="headerlink" title="四、JMS消息服务"></a>四、JMS消息服务</h3><p>讲消息队列就不得不提JMS 。JMS（Java Message Service,Java消息服务）API是一个消息服务的标准/规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。<br> 在EJB架构中，有消息bean可以无缝的与JM消息服务集成。在J2EE架构模式中，有消息服务者模式，用于实现消息与应用直接的解耦。</p>
<h4 id="4-1-消息模型"><a href="#4-1-消息模型" class="headerlink" title="4.1 消息模型"></a>4.1 消息模型</h4><p>在JMS标准中，有两种消息模型P2P（Point to Point）,Publish/Subscribe(Pub/Sub)。</p>
<h3 id="4-1-1-P2P模式"><a href="#4-1-1-P2P模式" class="headerlink" title="4.1.1 P2P模式"></a>4.1.1 P2P模式</h3><p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133959940.png" alt="image-20220105133959940"></p>
<p>P2P模式</p>
<p>P2P模式包含三个角色：消息队列（Queue），发送者(Sender)，接收者(Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。</p>
<p>P2P的特点</p>
<ul>
<li>每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在消息队列中)</li>
<li>发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列</li>
<li>接收者在成功接收消息之后需向队列应答成功</li>
</ul>
<p>如果希望发送的每个消息都会被成功处理的话，那么需要P2P模式。<br> 4.1.2 Pub/Sub模式</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133949330.png" alt="image-20220105133949330"></p>
<p>Pub/Sub模式</p>
<p>包含三个角色：主题（Topic），发布者（Publisher），订阅者（Subscriber） 。多个发布者将消息发送到Topic,系统将这些消息传递给多个订阅者。</p>
<p>Pub/Sub的特点</p>
<ul>
<li>每个消息可以有多个消费者</li>
<li>发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。</li>
<li>为了消费消息，订阅者必须保持运行的状态。</li>
</ul>
<p>为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。<br> 如果希望发送的消息可以不被做任何处理、或者只被一个消息者处理、或者可以被多个消费者处理的话，那么可以采用Pub/Sub模型。</p>
<h4 id="4-2消息消费"><a href="#4-2消息消费" class="headerlink" title="4.2消息消费"></a>4.2消息消费</h4><p>在JMS中，消息的产生和消费都是异步的。对于消费来说，JMS的消息者可以通过两种方式来消费消息。</p>
<ol>
<li>同步<br>订阅者或接收者通过receive方法来接收消息，receive方法在接收到消息之前（或超时之前）将一直阻塞；</li>
<li>异步<br>订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的onMessage方法。</li>
</ol>
<p>JNDI：Java命名和目录接口,是一种标准的Java命名系统接口。可以在网络上查找和访问服务。通过指定一个资源名称，该名称对应于数据库或命名服务中的一个记录，同时返回资源连接建立所必须的信息。<br> JNDI在JMS中起到查找和访问发送目标或消息来源的作用。</p>
<h4 id="4-3JMS编程模型"><a href="#4-3JMS编程模型" class="headerlink" title="4.3JMS编程模型"></a>4.3JMS编程模型</h4><h3 id="1-ConnectionFactory"><a href="#1-ConnectionFactory" class="headerlink" title="1. ConnectionFactory"></a>1. ConnectionFactory</h3><p>创建Connection对象的工厂，针对两种不同的JMS消息模型，分别有QueueConnectionFactory和TopicConnectionFactory两种。可以通过JNDI来查找ConnectionFactory对象。</p>
<h3 id="2-Destination"><a href="#2-Destination" class="headerlink" title="2. Destination"></a>2. Destination</h3><p>Destination的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的Destination是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的Destination也是某个队列或主题（即消息来源）。<br> 所以，Destination实际上就是两种类型的对象：Queue、Topic可以通过JNDI来查找Destination。</p>
<h3 id="3-Connection"><a href="#3-Connection" class="headerlink" title="3. Connection"></a>3. Connection</h3><p>Connection表示在客户端和JMS系统之间建立的链接（对TCP/IP Socket的包装）。Connection可以产生一个或多个Session。跟ConnectionFactory一样，Connection也有两种类型：QueueConnection和TopicConnection。</p>
<h3 id="4-Session"><a href="#4-Session" class="headerlink" title="4. Session"></a>4. Session</h3><p>Session是操作消息的接口。可以通过session创建生产者、消费者、消息等。Session提供了事务的功能。当需要使用session发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。同样，也分QueueSession和TopicSession。</p>
<h3 id="5-消息的生产者"><a href="#5-消息的生产者" class="headerlink" title="5. 消息的生产者"></a>5. 消息的生产者</h3><p>消息生产者由Session创建，并用于将消息发送到Destination。同样，消息生产者分两种类型：QueueSender和TopicPublisher。可以调用消息生产者的方法（send或publish方法）发送消息。</p>
<h3 id="6-消息消费者"><a href="#6-消息消费者" class="headerlink" title="6. 消息消费者"></a>6. 消息消费者</h3><p>消息消费者由Session创建，用于接收被发送到Destination的消息。两种类型：QueueReceiver和TopicSubscriber。可分别通过session的createReceiver(Queue)或createSubscriber(Topic)来创建。当然，也可以session的creatDurableSubscriber方法来创建持久化的订阅者。</p>
<h3 id="7-MessageListener"><a href="#7-MessageListener" class="headerlink" title="7. MessageListener"></a>7. MessageListener</h3><p>消息监听器。如果注册了消息监听器，一旦消息到达，将自动调用监听器的onMessage方法。EJB中的MDB（Message-Driven Bean）就是一种MessageListener。</p>
<p>深入学习JMS对掌握JAVA架构、EJB架构有很好的帮助，消息中间件也是大型分布式系统必须的组件。本次分享主要做全局性介绍，具体的深入需要大家学习，实践，总结，领会。</p>
<h3 id="五、常用消息队列"><a href="#五、常用消息队列" class="headerlink" title="五、常用消息队列"></a>五、常用消息队列</h3><p>一般商用的容器，比如WebLogic，JBoss，都支持JMS标准，开发上很方便。但免费的比如Tomcat，Jetty等则需要使用第三方的消息中间件。本部分内容介绍常用的消息中间件（Active MQ，Rabbit MQ，Zero MQ，Kafka）以及他们的特点。</p>
<h3 id="5-1-ActiveMQ"><a href="#5-1-ActiveMQ" class="headerlink" title="5.1 ActiveMQ"></a>5.1 ActiveMQ</h3><p>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现，尽管JMS规范出台已经是很久的事情了，但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。<br> ActiveMQ特性如下：</p>
<ol>
<li>多种语言和协议编写客户端。<br>语言: Java,C,C++,C#,Ruby,Perl,Python,PHP。<br>应用协议： OpenWire,Stomp REST,WS Notification,XMPP,AMQP</li>
<li>完全支持JMS1.1和J2EE 1.4规范 （持久化，XA消息，事务)</li>
<li>对Spring的支持。<br>ActiveMQ可以很容易内嵌到使用Spring的系统里面去，而且也支持Spring2.0的特性</li>
<li>通过了常见J2EE服务器（如 Geronimo,JBoss 4,GlassFish,WebLogic)的测试，其中通过JCA 1.5 resource adaptors的配置，可以让ActiveMQ可以自动的部署到任何兼容J2EE 1.4 商业服务器上</li>
<li>支持多种传送协议：in-VM,TCP,SSL,NIO,UDP,JGroups,JXTA</li>
<li>支持通过JDBC和journal提供高速的消息持久化</li>
<li>从设计上保证了高性能的集群，客户端-服务器，点对点</li>
<li>支持Ajax</li>
<li>支持与Axis的整合</li>
<li>可以很容易得调用内嵌JMS provider，进行测试</li>
</ol>
<h3 id="5-2-RabbitMQ"><a href="#5-2-RabbitMQ" class="headerlink" title="5.2 RabbitMQ"></a>5.2 RabbitMQ</h3><p>RabbitMQ是流行的开源消息队列系统，用erlang语言开发。RabbitMQ是AMQP（高级消息队列协议）的标准实现。支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX，持久化。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。</p>
<p><img src="https://cdn.jsdelivr.net/gh/FisherYu626/blogImages/images/image-20220105133934962.png" alt="image-20220105133934962"></p>
<p>RabbitMQ结构图</p>
<p>上图中有几个重要概念：</p>
<ul>
<li>Broker：简单来说就是消息队列服务器实体。</li>
<li>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。</li>
<li>Queue：消息队列载体，每个消息都会被投入到一个或多个队列。</li>
<li>Binding：绑定，它的作用就是把Exchange和Queue按照路由规则绑定起来。</li>
<li>Routing Key：路由关键字，Exchange根据这个关键字进行消息投递。</li>
<li>vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。</li>
<li>producer：消息生产者，就是投递消息的程序。</li>
<li>consumer：消息消费者，就是接受消息的程序。</li>
<li>channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</li>
</ul>
<p>消息队列的使用过程，如下：</p>
<ol>
<li>客户端连接到消息队列服务器，打开一个channel。</li>
<li>客户端声明一个exchange，并设置相关属性。</li>
<li>客户端声明一个queue，并设置相关属性。</li>
<li>客户端使用routing key，在exchange和queue之间建立好绑定关系。</li>
<li>客户端投递消息到exchange。</li>
</ol>
<p>exchange接收到消息后，就根据消息的key和已经设置的binding，进行消息路由，将消息投递到一个或多个队列里。</p>
<h2 id="5-3-ZeroMQ"><a href="#5-3-ZeroMQ" class="headerlink" title="5.3 ZeroMQ"></a>5.3 ZeroMQ</h2><p>号称史上最快的消息队列，它实际类似于Socket的一系列接口，他跟Socket的区别是：普通的socket是端到端的（1:1的关系），而ZMQ却是可以N：M 的关系，人们对BSD套接字的了解较多的是点对点的连接，点对点连接需要显式地建立连接、销毁连接、选择协议（TCP/UDP）和处理错误等，而ZMQ屏蔽了这些细节，让你的网络编程更为简单。ZMQ用于node与node间的通信，node可以是主机或者是进程。<br> 引用官方的说法： “ZMQ(以下ZeroMQ简称ZMQ)是一个简单好用的传输层，像框架一样的一个socket library，他使得Socket编程更加简单、简洁和性能更高。是一个消息处理队列库，可在多个线程、内核和主机盒之间弹性伸缩。ZMQ的明确目标是“成为标准网络协议栈的一部分，之后进入Linux内核”。现在还未看到它们的成功。但是，它无疑是极具前景的、并且是人们更加需要的“传统”BSD套接字之上的一层封装。ZMQ让编写高性能网络应用程序极为简单和有趣。”</p>
<p>特点是：</p>
<ul>
<li>高性能，非持久化；</li>
<li>跨平台：支持Linux、Windows、OS X等。</li>
<li>多语言支持； C、C++、Java、.NET、Python等30多种开发语言。</li>
<li>可单独部署或集成到应用中使用；</li>
<li>可作为Socket通信库使用。</li>
</ul>
<p>与RabbitMQ相比，ZMQ并不像是一个传统意义上的消息队列服务器，事实上，它也根本不是一个服务器，更像一个底层的网络通讯库，在Socket API之上做了一层封装，将网络通讯、进程通讯和线程通讯抽象为统一的API接口。支持“Request-Reply “，”Publisher-Subscriber“，”Parallel Pipeline”三种基本模型和扩展模型。</p>
<p>ZeroMQ高性能设计要点：</p>
<ol>
<li>无锁的队列模型<br>对于跨线程间的交互（用户端和session）之间的数据交换通道pipe，采用无锁的队列算法CAS；在pipe两端注册有异步事件，在读或者写消息到pipe的时，会自动触发读写事件。</li>
<li>批量处理的算法<br>对于传统的消息处理，每个消息在发送和接收的时候，都需要系统的调用，这样对于大量的消息，系统的开销比较大，zeroMQ对于批量的消息，进行了适应性的优化，可以批量的接收和发送消息。</li>
<li>多核下的线程绑定，无须CPU切换<br>区别于传统的多线程并发模式，信号量或者临界区， zeroMQ充分利用多核的优势，每个核绑定运行一个工作者线程，避免多线程之间的CPU切换开销。</li>
</ol>
<h2 id="5-4-Kafka"><a href="#5-4-Kafka" class="headerlink" title="5.4 Kafka"></a>5.4 Kafka</h2><p>Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群机来提供实时的消费。<br> Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：</p>
<ul>
<li>通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。（文件追加的方式写入数据，过期的数据定期删除）</li>
<li>高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。</li>
<li>支持通过Kafka服务器和消费机集群来分区消息。</li>
<li>支持Hadoop并行数据加载。</li>
</ul>
<p>Kafka相关概念</p>
<h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>Kafka集群包含一个或多个服务器，这种服务器被称为broker</p>
<h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</p>
<h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><p>Parition是物理上的概念，每个Topic包含一个或多个Partition.</p>
<h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>负责发布消息到Kafka Broker</p>
<h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>消息消费者，向Kafka Broker读取消息的客户端。</p>
<h3 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h3><p>每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</p>
<p>Kafka一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用。</p>
]]></content>
      <categories>
        <category>MessageQueue</category>
      </categories>
      <tags>
        <tag>MessageQueue</tag>
      </tags>
  </entry>
  <entry>
    <title>详解base64编码</title>
    <url>/2022/01/05/%E8%AF%A6%E8%A7%A3base64%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="详解Base64编码"><a href="#详解Base64编码" class="headerlink" title="详解Base64编码"></a>详解Base64编码</h1><span id="more"></span>
<p>Base64是网络上最常见的用于传输8bit字节码的编码方式之一，它基于64个可打印字符表示二进制数据。</p>
<h3 id="为什么使用Base64传输2进制字节码，而不是使用ASCII码传输？"><a href="#为什么使用Base64传输2进制字节码，而不是使用ASCII码传输？" class="headerlink" title="为什么使用Base64传输2进制字节码，而不是使用ASCII码传输？"></a>为什么使用Base64传输2进制字节码，而不是使用ASCII码传输？</h3><p>​        ASCII码 0-31 127是不可打印字符    32-126是可打印字符<br>ASCII码 0-31 127是不可打印字符    32-126是可打印字符</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220106003030035.png" alt="image-20220106003030035"></p>
<p>​    Base64被用于Http协议下传输二进制数据。（Http是文本协议，没法直接传输二进制数据）</p>
<p>​    Base64使用可打印的64个字符表示二进制数据。</p>
<p><img src="https://gitee.com/fisheryu626/blog-pics/raw/master/imgs/image-20220106000457348.png" alt="image-20220106000457348"></p>
<p>​    将字符串按照对应的编码转为二进制数值后，每6位作为一个Base64码。每3个字节转为4个Base64码，没有数据则用’=’补上空缺。1字节文本补2个‘=’，2字节文本补1个‘=’。Base64转码后的文本会比原来大1/3。</p>
<p>​    注意事项：</p>
<p>​    1）大多数编码是由字符串变为二进制，而Base64将二进制转换为zifuc</p>
<p>​    2）Base64不是一种加密</p>
<p>​    3）相同字符串的不同编码对应的Base64不一样。</p>
]]></content>
      <categories>
        <category>base64编码</category>
      </categories>
      <tags>
        <tag>base64编码</tag>
      </tags>
  </entry>
  <entry>
    <title>链表算法笔记</title>
    <url>/2022/04/17/%E9%93%BE%E8%A1%A8%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="链表算法笔记"><a href="#链表算法笔记" class="headerlink" title="链表算法笔记"></a>链表算法笔记</h1><span id="more"></span>
<h2 id="1-删除链表的倒数第n个节点"><a href="#1-删除链表的倒数第n个节点" class="headerlink" title="1.删除链表的倒数第n个节点"></a>1.删除链表的倒数第n个节点</h2><p>凡是头结点可能发生变化，先建立一个虚拟头结点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;<span class="comment">//此处长度为包含虚拟头结点长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p=dummy;p;p=p-&gt;next) n++;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> p=dummy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;;i&lt;n-k<span class="number">-1</span>;i++) p =p -&gt;next;</span><br><span class="line">        </span><br><span class="line">        p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-回文链表"><a href="#2-回文链表" class="headerlink" title="2.回文链表"></a>2.回文链表</h2><p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220403221154593.png" alt="image-20220403221154593"></p>
<p>先定位至链表后一半位置，再讲后一半进行倒序。</p>
<p>双指针同时从后往前进行比较。</p>
<p>比较完毕后将原链表恢复，负责lc报错。</p>
<p>！！！反转已反转的后半部分链表需要将最后一个节点的写一个指针置为空。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> a = head;</span><br><span class="line">        <span class="keyword">auto</span> start = head;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a)&#123;</span><br><span class="line">            n++;</span><br><span class="line">            a = a-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        a = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n-n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            a = a-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> b = a-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n/<span class="number">2</span><span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> c = b-&gt;next;</span><br><span class="line">            b-&gt;next = a;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> tail = a;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> success = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;val != start-&gt;val)&#123;</span><br><span class="line">                success = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a = a-&gt;next;</span><br><span class="line">            start = start-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        a = tail;</span><br><span class="line">        b = a-&gt;next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n/<span class="number">2</span><span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> c = b-&gt;next;</span><br><span class="line">            b-&gt;next = a;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">        &#125;</span><br><span class="line">        tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-环形链表"><a href="#3-环形链表" class="headerlink" title="3.环形链表"></a>3.环形链表</h2><p>检查一个链表是否存在环</p>
<p>解决方案：快慢指针 快指针每次前进2步，慢指针一次前进1步。如果存在环，则快指针早晚会相遇。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head||!head-&gt;next) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">auto</span> s = head,f = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (f)</span><br><span class="line">        &#123;</span><br><span class="line">            s = s-&gt;next;</span><br><span class="line">            f = f-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(!f) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            f = f-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(s == f) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>进阶：</p>
<p>返回环的起点位置</p>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220404122250260.png" alt="image-20220404122250260"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!head||!head-&gt;next) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">auto</span> s = head,f = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(f)&#123;</span><br><span class="line">            s = s-&gt;next;</span><br><span class="line">            f = f-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(!f) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            f = f-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(s == f)&#123;</span><br><span class="line">                s = head;</span><br><span class="line">                <span class="comment">//s指向head相当于从虚头前进一步</span></span><br><span class="line">                <span class="comment">//为保持同步，让f前进一步！！</span></span><br><span class="line">                f = f-&gt;next;</span><br><span class="line">                <span class="keyword">while</span>(s!=f)&#123;</span><br><span class="line">                    s = s-&gt;next;</span><br><span class="line">                    f = f-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://fisherpics.oss-cn-beijing.aliyuncs.com/imgs/image-20220404123643814.png" alt="image-20220404123643814"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表算法笔记</tag>
      </tags>
  </entry>
</search>
